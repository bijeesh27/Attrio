<%- include('../partials/admin/header') %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<body data-sidebar="dark"></body>

<div class="main-content">
  <div class="page-content">
    <div class="container-fluid">
      <!-- Page Title -->
      <div class="row">
        <div class="col-12">
          <div
            class="page-title-box d-sm-flex align-items-center justify-content-between"
          >
            <h4 class="mb-sm-0 font-size-18">Add Product</h4>
            <div class="page-title-right">
              <ol class="breadcrumb m-0">
                <li class="breadcrumb-item">
                  <a href="javascript: void(0);">Ecommerce</a>
                </li>
                <li class="breadcrumb-item active">Add Product</li>
              </ol>
            </div>
          </div>
        </div>
      </div>
      <!-- End Page Title -->

      <!-- Product Form -->
      <div class="row">
        <div class="col-12">
          <div class="card">
            <div class="card-body">
              <h4 class="card-title">Product Details</h4>
              <p class="card-title-desc">
                Fill in the product information below
              </p>

              <form
                action="/admin/add-product"
                method="post"
                enctype="multipart/form-data"
              >
                <!-- Basic Information -->
                <div class="row">
                  <div class="col-md-6">
                    <div class="mb-3">
                      <label for="name" class="form-label">Product Name</label>
                      <input
                        type="text"
                        class="form-control"
                        id="name"
                        name="name"
                        placeholder="Enter product name"
                      />
                    </div>
                    <div class="mb-3">
                      <label for="category" class="form-label">Category</label>
                      <select
                        class="form-select"
                        id="category"
                        name="category"
                      >
                        <option value="">Select category</option>
                        <% categories.forEach(category => { %>
                        <option value="<%= category._id %>">
                          <%= category.name %>
                        </option>
                        <%})%>
                      </select>
                    </div>
                    <div class="mb-3">
                      <label for="price" class="form-label">Price</label>
                      <input
                        type="number"
                        class="form-control"
                        id="price"
                        name="price"
                        placeholder="Enter price"
                      />
                    </div>
                  </div>

                  <div class="col-md-6">
                    <div class="mb-3">
                      <label for="description" class="form-label"
                        >Description</label
                      >
                      <textarea
                        class="form-control"
                        id="description"
                        name="description"
                        rows="3"
                        placeholder="Enter product description"
                      ></textarea>
                    </div>
                  
                  </div>
                </div>

                <!-- Stock by Size -->
                <div class="row">
                  <div class="col-12">
                    <div class="mb-3">
                      <label class="form-label">Size & Quantity</label>
                      <div id="stock-container">
                        <div class="row g-2 mb-2">
                          <div class="col-md-2">
                            <label for="">S</label>
                            <input
                              type="number"
                              class="form-control"
                              name="s"
                              placeholder="Enter the quantity"
                            />
                          </div>
                          <div class="col-md-2">
                            <label for="">M</label>
                            <input
                              type="number"
                              class="form-control"
                              name="m"
                              placeholder="Enter the quantity"
                            />
                          </div>
                          <div class="col-md-2">
                            <label for="">L</label>
                            <input
                              type="number"
                              class="form-control"
                              name="l"
                              placeholder="Enter the quantity"
                            />
                          </div>
                          <div class="col-md-2">
                            <label for="">XL</label>
                            <input
                              type="number"
                              class="form-control"
                              name="xl"
                              placeholder="Enter the quantity"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Image Upload -->
                <div class="row">
                  <div class="col-12">
                    <div class="mb-3">
                      <label class="form-label">Product Images (Max 3)</label>
                      <input
                        type="file"
                        class="form-control"
                        id="image-upload"
                        name="images"
                        multiple
                        accept="image/*"
                      />
                      <small class="form-text text-muted"
                        >You can upload up to 3 images.</small
                      >

                      <!-- Image Preview Container -->
                      <div
                        id="image-preview"
                        class="mt-3 d-flex gap-2 flex-wrap"
                      >
                        <!-- Preview images will be dynamically added here -->
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Cropping Modal -->
                <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
                  <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">
                        <div class="img-container">
                          <img id="crop-image" src="" alt="Image to crop">
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="crop-btn">Crop & Save</button>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Form Actions -->
                <div class="d-flex gap-2">
                  <button type="submit" class="btn btn-primary">
                    Save Product
                  </button>
                  <a href="/admin/products"
                    ><button type="button" class="btn btn-secondary">
                      Cancel
                    </button></a
                  >
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <!-- End Product Form -->
    </div>
    <!-- container-fluid -->
  </div>
  <!-- End Page-content -->

  <%- include('../partials/admin/footer') %>
</div>

<!-- Image Preview & Cropping Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form[action="/admin/add-product"]');
    
    // Get all input elements
    const name = document.getElementById('name');
    const category = document.getElementById('category');
    const price = document.getElementById('price');
    const description = document.getElementById('description');
    const imageUpload = document.getElementById('image-upload');
    const sizeS = document.querySelector('input[name="s"]');
    const sizeM = document.querySelector('input[name="m"]');
    const sizeL = document.querySelector('input[name="l"]');
    const sizeXL = document.querySelector('input[name="xl"]');
    
    // Variables for managing images
    let imageFiles = [];
    let previewImages = [];
    
    // Create error elements
    function createErrorElement(inputId) {
        const errorElement = document.createElement('div');
        errorElement.className = 'invalid-feedback';
        errorElement.id = inputId + 'Error';
        
        // Insert error element after the input
        const input = document.getElementById(inputId);
        input.parentNode.insertBefore(errorElement, input.nextSibling);
        
        return errorElement;
    }
    
    // Create error elements for all fields
    const nameError = createErrorElement('name');
    const categoryError = createErrorElement('category');
    const priceError = createErrorElement('price');
    const descriptionError = createErrorElement('description');
    
    // Create error for image upload
    const imageError = document.createElement('div');
    imageError.className = 'invalid-feedback';
    imageError.id = 'imageError';
    imageUpload.parentNode.insertBefore(imageError, imageUpload.nextSibling);
    
    // Create error for sizes
    const sizeError = document.createElement('div');
    sizeError.className = 'invalid-feedback d-block mt-2';
    sizeError.id = 'sizeError';
    sizeError.style.display = 'none';
    document.getElementById('stock-container').appendChild(sizeError);
    
    // Function to show error
    function showError(input, errorElement, message) {
        input.classList.add('is-invalid');
        input.classList.remove('is-valid');
        errorElement.style.display = 'block';
        errorElement.textContent = message;
    }
    
    // Function to hide error
    function hideError(input, errorElement) {
        input.classList.remove('is-invalid');
        input.classList.add('is-valid');
        errorElement.style.display = 'none';
    }
    
    // Name validation
    name.addEventListener('blur', function() {
        if (name.value.trim() === '') {
            showError(name, nameError, 'Product name is required');
        } else if (name.value.trim().length < 3) {
            showError(name, nameError, 'Product name must be at least 3 characters');
        } else {
            hideError(name, nameError);
        }
    });
    
    // Category validation
    category.addEventListener('blur', function() {
        if (category.value === '') {
            showError(category, categoryError, 'Please select a category');
        } else {
            hideError(category, categoryError);
        }
    });
    
    // Price validation
    price.addEventListener('blur', function() {
        if (price.value.trim() === '') {
            showError(price, priceError, 'Price is required');
        } else if (isNaN(price.value) || Number(price.value) <= 0) {
            showError(price, priceError, 'Please enter a valid price greater than 0');
        } else {
            hideError(price, priceError);
        }
    });
    
    // Description validation
    description.addEventListener('blur', function() {
        if (description.value.trim() === '') {
            showError(description, descriptionError, 'Description is required');
        } else if (description.value.trim().length < 20) {
            showError(description, descriptionError, 'Description must be at least 20 characters long');
        } else {
            hideError(description, descriptionError);
        }
    });
    
    // Setup for image cropping
    let cropper;
    let currentImageElement;
    let currentFileIndex;
    
    // Image validation and preview
    imageUpload.addEventListener('change', function(event) {
        const files = event.target.files;
        const previewContainer = document.getElementById('image-preview');
        
        // Validate number of files
        if (files.length > 3 || files.length + previewImages.length > 3) {
            showError(imageUpload, imageError, 'You can only upload up to 3 images.');
            event.target.value = ""; // Clear the input
            return;
        } else {
            hideError(imageUpload, imageError);
        }
        
        // Store files for later processing
        for (let i = 0; i < files.length; i++) {
            imageFiles.push(files[i]);
        }
        
        // Create preview for each image
        displayImagePreviews(files);
    });
    
    // Function to display image previews with crop and delete buttons
    function displayImagePreviews(files) {
        const previewContainer = document.getElementById('image-preview');
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();
            
            reader.onload = function(e) {
                const fileIndex = previewImages.length;
                previewImages.push({
                    file: file,
                    src: e.target.result
                });
                
                // Create image container
                const imgContainer = document.createElement('div');
                imgContainer.className = 'position-relative image-container mb-2';
                imgContainer.dataset.index = fileIndex;
                
                // Create image element
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = "Product Image";
                img.className = 'img-thumbnail';
                img.style.width = '100px';
                img.style.height = '100px';
                img.style.objectFit = 'cover';
                
                // Create crop button
                const cropBtn = document.createElement('button');
                cropBtn.type = 'button';
                cropBtn.className = 'btn btn-primary btn-sm crop-image';
                cropBtn.style.position = 'absolute';
                cropBtn.style.top = '0';
                cropBtn.style.left = '0';
                cropBtn.style.padding = '0.2rem 0.4rem';
                cropBtn.innerHTML = '<i class="bx bx-crop"></i>';
                
                // Create delete button
                const deleteBtn = document.createElement('button');
                deleteBtn.type = 'button';
                deleteBtn.className = 'btn btn-danger btn-sm delete-image';
                deleteBtn.style.position = 'absolute';
                deleteBtn.style.top = '0';
                deleteBtn.style.right = '0';
                deleteBtn.style.padding = '0.2rem 0.4rem';
                deleteBtn.innerHTML = '<i class="bx bx-trash"></i>';
                
                // Add event listeners
                cropBtn.addEventListener('click', function() {
                  setupCropper(img, fileIndex);
                });
                
                deleteBtn.addEventListener('click', function() {
                    // Remove the image container
                    imgContainer.remove();
                    
                    // Remove the file from arrays
                    imageFiles.splice(fileIndex, 1);
                    previewImages.splice(fileIndex, 1);
                    
                    // Update data-index attributes for remaining images
                    const remainingContainers = document.querySelectorAll('.image-container');
                    remainingContainers.forEach((container, idx) => {
                        container.dataset.index = idx;
                    });
                });
                
                // Add elements to container
                imgContainer.appendChild(img);
                imgContainer.appendChild(cropBtn);
                imgContainer.appendChild(deleteBtn);
                previewContainer.appendChild(imgContainer);
            };
            
            reader.readAsDataURL(file);
        }
    }
    
    // Setup cropper
    function setupCropper(imgElement, fileIndex) {
        currentImageElement = imgElement;
        currentFileIndex = fileIndex;
        
        // Set up the cropper modal
        const cropImage = document.getElementById('crop-image');
        cropImage.src = imgElement.src;
        
        // Initialize cropper
        if (cropper) {
            cropper.destroy();
        }
        
        cropper = new Cropper(cropImage, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1
        });
        
        // Show the modal
        const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
        cropModal.show();
    }
    
    // Handle crop button click
    document.getElementById('crop-btn').addEventListener('click', function() {
        if (!cropper) return;
        
        // Get the cropped canvas
        const canvas = cropper.getCroppedCanvas({
            width: 300,
            height: 300
        });
        
        // Convert to blob and create a new file
        canvas.toBlob(function(blob) {
            const croppedFile = new File([blob], imageFiles[currentFileIndex].name, {
                type: imageFiles[currentFileIndex].type,
                lastModified: new Date().getTime()
            });
            
            // Update the image preview
            currentImageElement.src = canvas.toDataURL();
            
            // Update the file in the arrays
            imageFiles[currentFileIndex] = croppedFile;
            previewImages[currentFileIndex].src = canvas.toDataURL();
            
            // Close the modal
            const cropModal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
            cropModal.hide();
            
            // Destroy the cropper
            cropper.destroy();
            cropper = null;
        });
    });
    
    // Validate at least one size has stock
    function validateSizes() {
        if (
            (sizeS.value === '' )&&
            (sizeM.value === '' )&&
            (sizeL.value === '' ) &&
            (sizeXL.value === '' )
        ) {
            sizeError.style.display = 'block';
            sizeError.textContent = 'Add the stock quantity';
            return false;
        } else {
            sizeError.style.display = 'none';
            return true;
        }
    }
    
    // Size input event listeners
    sizeS.addEventListener('input', validateSizes);
    sizeM.addEventListener('input', validateSizes);
    sizeL.addEventListener('input', validateSizes);
    sizeXL.addEventListener('input', validateSizes);
    
    // Clear errors when inputs change
    name.addEventListener('input', function() {
        if (name.value.trim().length >= 3) {
            hideError(name, nameError);
        }
    });
    
    category.addEventListener('input', function() {
        if (category.value !== '') {
            hideError(category, categoryError);
        }
    });
    
    price.addEventListener('input', function() {
        if (!isNaN(price.value) && Number(price.value) > 0) {
            hideError(price, priceError);
        }
    });
    
    description.addEventListener('input', function() {
        if (description.value.trim().length >= 20) {
            hideError(description, descriptionError);
        }
    });
    
    // Form submission validation
    form.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Validate name
        if (name.value.trim() === '') {
            showError(name, nameError, 'Product name is required');
            isValid = false;
        } else if (name.value.trim().length < 3) {
            showError(name, nameError, 'Product name must be at least 3 characters');
            isValid = false;
        } else {
            hideError(name, nameError);
        }
        
        // Validate category
        if (category.value === '') {
            showError(category, categoryError, 'Please select a category');
            isValid = false;
        } else {
            hideError(category, categoryError);
        }
        
        // Validate price
        if (price.value.trim() === '') {
            showError(price, priceError, 'Price is required');
            isValid = false;
        } else if (isNaN(price.value) || Number(price.value) <= 0) {
            showError(price, priceError, 'Please enter a valid price greater than 0');
            isValid = false;
        } else {
            hideError(price, priceError);
        }
        
        // Validate description
        if (description.value.trim() === '') {
            showError(description, descriptionError, 'Description is required');
            isValid = false;
        } else if (description.value.trim().length < 20) {
            showError(description, descriptionError, 'Description must be at least 20 characters long');
            isValid = false;
        } else {
            hideError(description, descriptionError);
        }
        
        // Validate images
        if (previewImages.length === 0) {
            showError(imageUpload, imageError, 'Please select at least one image');
            isValid = false;
        } else {
            hideError(imageUpload, imageError);
        }
        
        // Validate sizes
        if (!validateSizes()) {
            isValid = false;
        }
        
        // Prevent form submission if validation fails
        if (!isValid) {
            e.preventDefault();
        } else {
            // Create the actual FormData to submit
            // Note: In a real implementation, you'd need to adjust this based on how your server expects the files
            // This is just a placeholder for demonstration
            const formData = new FormData(form);
            
            // Clear existing files
            formData.delete('images');
            
            // Add cropped files
            for (let i = 0; i < imageFiles.length; i++) {
                formData.append('images', imageFiles[i]);
            }
            
            // If you need to do something with the FormData before submission
            // e.preventDefault();
            // fetch('/admin/add-product', {
            //     method: 'POST',
            //     body: formData
            // })
            // .then(response => response.json())
            // .then(data => {
            //     console.log('Success:', data);
            //     window.location.href = '/admin/products';
            // })
            // .catch(error => {
            //     console.error('Error:', error);
            // });
        }
    });
});
</script>