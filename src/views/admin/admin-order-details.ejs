<%- include('../partials/admin/header') %>

<style>
  .order-details-container {
    padding: 20px;
  }
  
  .order-id {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 5px;
  }
  
  .order-date {
    color: #6c757d;
    font-size: 14px;
    margin-bottom: 20px;
  }
  
  .section-title {
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
  }
  
  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }
  
  .info-card {
    background-color: #fff;
    border-radius: 6px;
    padding: 15px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
  }
  
  .info-card h5 {
    font-size: 14px;
    color: #6c757d;
    margin-bottom: 10px;
  }
  
  .info-card p {
    margin-bottom: 5px;
    font-size: 14px;
  }
  
  .status-badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
    display: inline-block;
  }
  
  .status-pending {
    background-color: #ffedd5;
    color: #c2410c;
  }
  
  .status-processing {
    background-color: #e0f2fe;
    color: #0369a1;
  }
  
  .status-shipped {
    background-color: #dcfce7;
    color: #15803d;
  }
  
  .status-delivered {
    background-color: #d1fae5;
    color: #047857;
  }
  
  .status-cancelled {
    background-color: #fef2f2;
    color: #b91c1c;
  }
  
  .payment-status-paid {
    background-color: #dcfce7;
    color: #15803d;
  }
  
  .payment-status-pending {
    background-color: #ffedd5;
    color: #c2410c;
  }
  
  .payment-status-failed {
    background-color: #fef2f2;
    color: #b91c1c;
  }
  
  .return-status-requested {
    background-color: #ffedd5;
    color: #c2410c;
  }
  
  .return-status-approved {
    background-color: #e0f2fe;
    color: #0369a1;
  }
  
  .return-status-completed {
    background-color: #d1fae5;
    color: #047857;
  }
  
  .return-status-rejected {
    background-color: #fef2f2;
    color: #b91c1c;
  }
  
  .return-status-none {
    background-color: #f3f4f6;
    color: #6b7280;
  }
  
  .status-select {
    padding: 6px 10px;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 500;
    border: 1px solid #ddd;
    background-color: white;
    cursor: pointer;
    min-width: 140px;
  }
  
  .status-updating {
    opacity: 0.5;
    pointer-events: none;
  }
  
  .product-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .product-table th,
  .product-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #eee;
  }
  
  .product-table th {
    font-weight: 600;
    background-color: #f9fafb;
  }
  
  .product-image {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
  }
  
  .product-name {
    font-weight: 500;
  }
  
  .product-variant {
    font-size: 12px;
    color: #6c757d;
  }
  
  .order-summary {
    width: 100%;
    max-width: 400px;
    margin-left: auto;
  }
  
  .summary-row {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    border-bottom: 1px solid #eee;
  }
  
  .summary-row.total {
    font-weight: 600;
    font-size: 16px;
    border-top: 2px solid #ddd;
    border-bottom: none;
    padding-top: 15px;
  }
  
  .toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
  }
  
  .toast {
    padding: 12px 20px;
    margin-bottom: 10px;
    border-radius: 4px;
    font-weight: 500;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    justify-content: space-between;
    min-width: 300px;
    animation: slideIn 0.3s ease-out forwards;
  }
  
  .toast-success {
    background-color: #dcfce7;
    color: #15803d;
    border-left: 4px solid #15803d;
  }
  
  .toast-error {
    background-color: #fef2f2;
    color: #b91c1c;
    border-left: 4px solid #b91c1c;
  }
  
  .toast-close {
    background: transparent;
    border: none;
    color: inherit;
    font-size: 16px;
    cursor: pointer;
  }
  
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
  
  .timeline {
    position: relative;
    margin: 20px 0;
    padding-left: 30px;
  }
  
  .timeline::before {
    content: '';
    position: absolute;
    left: 9px;
    top: 0;
    height: 100%;
    width: 2px;
    background-color: #e2e8f0;
  }
  
  .timeline-item {
    position: relative;
    padding-bottom: 20px;
  }
  
  .timeline-item:last-child {
    padding-bottom: 0;
  }
  
  .timeline-dot {
    position: absolute;
    left: -30px;
    top: 0;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: #556ee6;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .timeline-dot i {
    color: white;
    font-size: 12px;
  }
  
  .timeline-content {
    background-color: #f8f9fa;
    padding: 12px 15px;
    border-radius: 6px;
  }
  
  .timeline-date {
    font-size: 12px;
    color: #6c757d;
    margin-bottom: 5px;
  }
  
  .timeline-title {
    font-weight: 600;
    margin-bottom: 5px;
  }
  
  .timeline-details {
    font-size: 13px;
    color: #495057;
  }
  
  .action-buttons {
    display: flex;
    gap: 10px;
    margin-top: 20px;
  }
  
  .action-buttons .btn {
    padding: 8px 15px;
    font-size: 14px;
  }
  
  .address-block {
    line-height: 1.6;
  }
  
  .status-update-section {
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 30px;
  }
  
  .status-update-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
  }
  
  .status-update-item {
    display: flex;
    flex-direction: column;
  }
  
  .status-update-item label {
    font-weight: 500;
    margin-bottom: 8px;
  }
  
  .status-update-controls {
    display: flex;
    justify-content: flex-end;
    margin-top: 20px;
  }
</style>

<body data-sidebar="dark">
  <div class="main-content">
    <div class="page-content">
      <div class="container-fluid">
        <!-- Start page title -->
        <div class="row">
          <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
              <h4 class="mb-sm-0 font-size-18">Order Details</h4>
              <div class="page-title-right">
                <ol class="breadcrumb m-0">
                  <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                  <li class="breadcrumb-item"><a href="/admin/orders">Orders</a></li>
                  <li class="breadcrumb-item active">Order Details</li>
                </ol>
              </div>
            </div>
          </div>
        </div>
        <!-- End page title -->
        
        <!-- Toast notification container -->
        <div class="toast-container" id="toastContainer"></div>
        
        <div class="order-details-container">
          <div class="row">
            <div class="col-12">
              <div class="card">
                <div class="card-body">
                  <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                      <div class="order-id">Order #<%= order.orderNumber %></div>
                      <div class="order-date">
                        <i class="bx bx-calendar me-1"></i>
                        <%= new Date(order.createdAt).toLocaleDateString() %> - <%= new Date(order.createdAt).toLocaleTimeString() %>
                      </div>
                    </div>
                    <a href="/admin/orders" class="btn btn-light btn-sm">
                      <i class="bx bx-arrow-back me-1"></i> Back to Orders
                    </a>
                  </div>
                  
                  <!-- Status Update Section -->
                  <div class="status-update-section">
                    <h5 class="section-title">Order Status Management</h5>
                    <div class="status-update-grid">
                      <div class="status-update-item">
                        <label for="orderStatusSelect">Order Status:</label>
                        <select 
                          id="orderStatusSelect"
                          class="status-select" 
                          data-status-type="orderStatus" 
                          data-original-value="<%= order.orderStatus   %>"
                          onchange="updateOrderStatus(this, '<%= order.id %>', 'orderStatus')"
                        >
                          <option value="pending" <%= order.orderStatus   === 'pending' ? 'selected' : '' %>>Pending</option>
                          <option value="processing" <%= order.orderStatus   === 'processing' ? 'selected' : '' %>>Processing</option>
                          <option value="shipped" <%= order.orderStatus   === 'shipped' ? 'selected' : '' %>>Shipped</option>
                          <option value="delivered" <%= order.orderStatus   === 'delivered' ? 'selected' : '' %>>Delivered</option>
                          <option value="cancelled" <%= order.orderStatus   === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                        </select>
                      </div>
                      <div class="status-update-item">
                        <label for="paymentStatusSelect">Payment Status:</label>
                        <select 
                          id="paymentStatusSelect"
                          class="status-select" 
                          data-status-type="paymentStatus" 
                          data-original-value="<%= order.paymentStatus   %>"
                          onchange="updateOrderStatus(this, '<%= order.id %>', 'paymentStatus')"
                        >
                          <option value="paid" <%= order.paymentStatus   === 'paid' ? 'selected' : '' %>>Paid</option>
                          <option value="pending" <%= order.paymentStatus   === 'pending' ? 'selected' : '' %>>Pending</option>
                          <option value="failed" <%= order.paymentStatus   === 'failed' ? 'selected' : '' %>>Failed</option>
                        </select>
                      </div>
                      <div class="status-update-item">
                        <label for="returnStatusSelect">Return Status:</label>
                        <select 
                          id="returnStatusSelect"
                          class="status-select" 
                          data-status-type="returnStatus" 
                          data-original-value="<%= order.returnStatus ? order.returnStatus   : 'none' %>"
                          onchange="updateOrderStatus(this, '<%= order.id %>', 'returnStatus')"
                        >
                          <option value="none" <%= !order.returnStatus || order.returnStatus   === 'none' ? 'selected' : '' %>>None</option>
                          <option value="requested" <%= order.returnStatus && order.returnStatus   === 'requested' ? 'selected' : '' %>>Requested</option>
                          <option value="approved" <%= order.returnStatus && order.returnStatus   === 'approved' ? 'selected' : '' %>>Approved</option>
                          <option value="completed" <%= order.returnStatus && order.returnStatus   === 'completed' ? 'selected' : '' %>>Completed</option>
                          <option value="rejected" <%= order.returnStatus && order.returnStatus   === 'rejected' ? 'selected' : '' %>>Rejected</option>
                        </select>
                    </div>
                    
                  </div>
                  <div class="status-update-controls">
                    
                  </div>
                </div>

                <!-- Customer and Order Information -->
                <div class="info-grid">
                  <div class="info-card">
                    <h5>CUSTOMER INFORMATION</h5>
                    <p><strong>Name:</strong> <%= order.userId.username %></p>
                    <p><strong>Email:</strong> <%= order.userId.email %></p>
                    <p><strong>Phone:</strong> <%= order.userId.number || 'N/A' %></p>
                    <p><strong>Customer Since:</strong> <%= new Date(order.userId.createdAt).toLocaleDateString() %></p>
                  </div>
                  <div class="info-card">
                    <h5>SHIPPING ADDRESS</h5>
                    <div class="address-block">
                        <p><strong>Name:</strong> <%= order.userId.username %></p>
                        <p><strong>Email:</strong> <%= order.userId.email %></p>
                        <p><strong>Phone:</strong> <%= order.userId.number || 'N/A' %></p>
                        <p><strong>Customer Since:</strong> <%= new Date(order.userId.createdAt).toLocaleDateString() %></p>
                      
                    </div>
                  </div>
                  <div class="info-card">
                    <h5>PAYMENT INFORMATION</h5>
                    <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                    <p><strong>Transaction ID:</strong> <%= order.transactionId || 'N/A' %></p>
                    <p><strong>Payment Status:</strong> 
                      <span class="status-badge payment-status-<%= order.paymentStatus   %>">
                        <%= order.paymentStatus %>
                      </span>
                    </p>
                    <p><strong>Payment Date:</strong> <%= order.paymentDate ? new Date(order.paymentDate).toLocaleDateString() : 'N/A' %></p>
                  </div>
                  <div class="info-card">
                    <h5>ORDER SUMMARY</h5>
                    <p><strong>Order Status:</strong> 
                      <span class="status-badge status-<%= order.orderStatus   %>">
                        <%= order.orderStatus %>
                      </span>
                    </p>
                    <p><strong>Return Status:</strong> 
                      <span class="status-badge return-status-<%= order.returnStatus ? order.returnStatus   : 'none' %>">
                        <%= order.returnStatus || 'None' %>
                      </span>
                    </p>
                    <p><strong>Order Date:</strong> <%= new Date(order.createdAt).toLocaleDateString() %></p>
                    
                  </div>
                </div>

                <!-- Order Items -->
                <h5 class="section-title">Order Items</h5>
                <div class="table-responsive">
                  <table class="product-table">
                    <thead>
                      <tr>
                        <th>Product</th>
                        <th>Product Name</th>
                        <th>Size</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% order.orderedItem.forEach(item => { %>
                      <tr>
                        <td>
                          <div class="d-flex align-items-center">
                            <img src="/<%= item.productId.image[0] %>" alt="<%= item.productId.name %>" class="product-image me-3">
                            <div>
                              
                              <% if (item.variant) { %>
                                <div class="product-variant">
                                  <% Object.entries(item.variant).forEach(([key, value]) => { %>
                                    <%= key %>: <%= value %><br>
                                  <% }) %>
                                </div>
                              <% } %>
                            </div>
                          </div>
                        </td>
                        <td><%= item.productId.name %></td>
                        <td>Size.<%= item.size %></td>
                        <td>Rs.<%= item.productPrice %></td>
                        <td>Qty.<%= item.quantity %></td>
                        <td>Rs.<%= item.productPrice * item.quantity %></td>
                      </tr>
                      <% }) %>
                    </tbody>
                  </table>
                </div>

                <!-- Order Summary -->
                <div class="order-summary mt-4">
                  <div class="summary-row">
                    <div>Subtotal</div>
                    <div>Rs.<%= order.orderAmount %></div>
                  </div>
                  <div class="summary-row">
                    <div>Shipping</div>
                    <div>Rs.100</div>
                  </div>
                  <% if (order.discount) { %>
                  <div class="summary-row">
                    <div>Discount</div>
                    <div>-Rs.<%= order.discount %></div>
                  </div>
                  <% } %>
                  <% if (order.tax) { %>
                  <div class="summary-row">
                    <div>Tax</div>
                    <div>Rs.<%= order.tax %></div>
                  </div>
                  <% } %>
                  <div class="summary-row total">
                    <div>Total</div>
                    <div>Rs.<%= order.orderAmount %></div>
                  </div>
                </div>

                
               
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</body>



<script>
// Global variables
let currentOrderId = '<%= order.id %>';
let noteModalInstance;

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  // Initialize modal
  noteModalInstance = new bootstrap.Modal(document.getElementById('noteModal'));
  
  // Apply status-specific styling to dropdowns
  applyStatusColors();
});

// Apply colors to status dropdowns
function applyStatusColors() {
  const orderStatusSelect = document.getElementById('orderStatusSelect');
  const paymentStatusSelect = document.getElementById('paymentStatusSelect');
  const returnStatusSelect = document.getElementById('returnStatusSelect');
  
  orderStatusSelect.classList.add(`status-${orderStatusSelect.value}`);
  paymentStatusSelect.classList.add(`payment-status-${paymentStatusSelect.value}`);
  returnStatusSelect.classList.add(`return-status-${returnStatusSelect.value}`);
}

// Show toast notification
function showToast(message, type = 'success') {
  const toastContainer = document.getElementById('toastContainer');
  const toast = document.createElement('div');
  toast.className = `toast toast-${type}`;
  toast.innerHTML = `
    <span>${message}</span>
    <button class="toast-close" onclick="this.parentElement.remove()">×</button>
  `;
  toastContainer.appendChild(toast);
  
  // Auto remove after 5 seconds
  setTimeout(() => {
    toast.style.animation = 'slideOut 0.3s ease-in forwards';
    setTimeout(() => {
      if (toast.parentElement) {
        toast.parentElement.removeChild(toast);
      }
    }, 300);
  }, 5000);
}

// Update order status
function updateOrderStatus(selectElement, orderId, statusType) {
  const newStatus = selectElement.value;
  const originalValue = selectElement.getAttribute('data-original-value');
  
  // If no change, do nothing
  if (newStatus === originalValue) {
    return;
  }
  
  // Add loading state
  selectElement.classList.add('status-updating');
  
  // Send AJAX request to update status
  fetch('/admin/updateorderstatus', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      orderId: orderId,
      statusType: statusType,
      newStatus: newStatus
    })
  })
  .then(response => response.json())
  .then(data => {
    // Remove loading state
    selectElement.classList.remove('status-updating');
    
    if (data.success) {
      // Update the data-original-value attribute
      selectElement.setAttribute('data-original-value', newStatus);
      
      // Success message
      showToast(`Order ${statusType} updated successfully to ${newStatus}`, 'success');
      
      // Update the relevant status badge
      updateStatusBadge(statusType, newStatus);
      
      // Update the select element class for styling
      removeStatusClasses(selectElement, statusType);
      if (statusType === 'orderStatus') {
        selectElement.classList.add(`status-${newStatus}`);
      } else if (statusType === 'paymentStatus') {
        selectElement.classList.add(`payment-status-${newStatus}`);
      } else if (statusType === 'returnStatus') {
        selectElement.classList.add(`return-status-${newStatus}`);
      }
      
      // Refresh the page to update the timeline
      setTimeout(() => {
        location.reload();
      }, 1500);
    } else {
      // Error message
      showToast(data.message || 'Failed to update status', 'error');
      
      // Revert back to original value
      selectElement.value = originalValue;
    }
  })
  .catch(error => {
    // Remove loading state
    selectElement.classList.remove('status-updating');
    
    // Error message
    showToast('Server error occurred. Please try again.', 'error');
    
    // Revert back to original value
    selectElement.value = originalValue;
  });
}

// Remove status classes
function removeStatusClasses(element, statusType) {
  if (statusType === 'orderStatus') {
    element.classList.remove('status-pending', 'status-processing', 'status-shipped', 'status-delivered', 'status-cancelled');
  } else if (statusType === 'paymentStatus') {
    element.classList.remove('payment-status-paid', 'payment-status-pending', 'payment-status-failed');
  } else if (statusType === 'returnStatus') {
    element.classList.remove('return-status-none', 'return-status-requested', 'return-status-approved', 'return-status-completed', 'return-status-rejected');
  }
}

// Update status badge
function updateStatusBadge(statusType, newStatus) {
  if (statusType === 'orderStatus') {
    const badge = document.querySelector('.status-badge');
    removeStatusClasses(badge, 'orderStatus');
    badge.classList.add(`status-${newStatus}`);
    badge.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
  } else if (statusType === 'paymentStatus') {
    const badge = document.querySelector('.payment-status-badge');
    removeStatusClasses(badge, 'paymentStatus');
    badge.classList.add(`payment-status-${newStatus}`);
    badge.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
  } else if (statusType === 'returnStatus') {
    const badge = document.querySelector('.return-status-badge');
    removeStatusClasses(badge, 'returnStatus');
    badge.classList.add(`return-status-${newStatus}`);
    badge.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
  }
}

</script>