<%- include('../partials/user/header') %>
<link rel="stylesheet" href="/user/assets/css/checkoutstyle.css">

<!-- Start Search Overlay -->
<div class="search-overlay">
  <div class="d-table">
    <div class="d-table-cell">
      <div class="search-overlay-layer"></div>
      <div class="search-overlay-layer"></div>
      <div class="search-overlay-layer"></div>
      
      <div class="search-overlay-close">
        <span class="search-overlay-close-line"></span>
        <span class="search-overlay-close-line"></span>
      </div>

      <div class="search-overlay-form">
        <form action="/search" method="GET">
          <input type="text" class="input-search" placeholder="Search here..." name="query">
          <button type="submit"><i class='bx bx-search-alt'></i></button>
        </form>
      </div>
    </div>
  </div>
</div>
<!-- End Search Overlay -->

<!-- Start Page Title -->
<div class="page-title-area">
  <div class="container">
    <div class="page-title-content">
      <h2>Checkout</h2>
      <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/cart">Cart</a></li>
        <li>Checkout</li>
      </ul>
    </div>
  </div>
</div>
<!-- End Page Title -->

<!-- Start Checkout Area -->
<section class="checkout-area ptb-100">
  <div class="container">
    <div class="row">
      <!-- Left Column - Delivery Address & Payment -->
      <div class="col-lg-8">
        <div class="checkout-steps">
          <!-- Step Indicator -->
          <div class="checkout-steps-indicator">
            <div class="step active">
              <div class="step-number">1</div>
              <div class="step-text">Shipping</div>
            </div>
            <div class="step-connector"></div>
            <div class="step">
              <div class="step-number">2</div>
              <div class="step-text">Payment</div>
            </div>
            <div class="step-connector"></div>
            <div class="step">
              <div class="step-number">3</div>
              <div class="step-text">Confirmation</div>
            </div>
          </div>

          <!-- Delivery Address Section -->
          <div class="checkout-section">
            <div class="section-header">
              <h3><i class='bx bx-map'></i> Delivery Address</h3>
            </div>
            
            <div class="section-body">
              <!-- Saved Addresses -->
              <div class="saved-addresses">
                <% if ( addresses && addresses.length > 0) { %>
                  <div class="address-selection">
                    <% addresses.forEach((address, index) => { %>
                      <div class="address-card <%= index === 0 ? 'selected' : '' %>">
                        <div class="address-radio">
                          <input type="radio" name="selectedAddress" id="address-<%= index %>" 
                                 value="<%= address._id %>" <%= index === 0 ? 'checked' : '' %>>
                          <label for="address-<%= index %>" class="address-selector"></label>
                        </div>
                        <div class="address-content">
                          <h4><%= address.name %></h4>
                          <p><%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                          <p><i class='bx bx-phone'></i> <%= address.number %></p>
                          <div class="address-actions">
                           
                          </div>
                        </div>
                      </div>
                    <% }); %>
                  </div>
                <% } else { %>
                  <div class="no-addresses">
                    <div class="no-address-icon">
                      <i class='bx bx-map-alt'></i>
                    </div>
                    <p>You don't have any saved addresses</p>
                  </div>
                <% } %>
                
                <button type="button" class="btn-add-address" id="addAddressBtn" >
                  <i class='bx bx-plus-circle'></i> Add New Address
                </button>
              </div>
              
              <!-- New Address Form (Hidden by default) -->
              <div class="address-form-container" id="addressFormContainer" style="display: none;">
                <form id="addressForm">
                  <div class="form-header">
                    <h4 id="addressFormTitle">Add New Address</h4>
                    <button type="button" class="form-close" id="closeAddressForm">
                      <i class='bx bx-x'></i>
                    </button>
                  </div>
                  
                  <div class="row">
                    <div class="col-md-6">
                      <div class="form-group">
                        <label for="name">Full Name</label>
                        <input type="text" id="name" name="name" class="form-control" required>
                      </div>
                    </div>
                    
                    <div class="col-md-6">
                      <div class="form-group">
                        <label for="phone">Phone Number</label>
                        <input type="tel" id="phone" name="phone" class="form-control" required>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="form-group">
                          <label for="email">Email</label>
                          <input type="email" id="email" name="email" class="form-control" required>
                      </div>
                  </div>
                  
                  <!-- Add before default address checkbox -->
                  <div class="col-md-6">
                      <div class="form-group">
                          <label for="country">Country</label>
                          <input type="text" id="country" name="country" class="form-control" required>
                      </div>
                  </div>
                  
                  <div class="col-md-6">
                      <div class="form-group">
                          <label for="saveAs">Save As</label>
                          <select id="saveAs" name="saveAs" class="form-control" required>
                              <option value="Home">Home</option>
                              <option value="Work">Work</option>
                              <option value="Other">Other</option>
                          </select>
                      </div>
                  </div>
                    
                    <div class="col-md-12">
                      <div class="form-group">
                        <label for="street">Street Address</label>
                        <input type="text" id="street" name="street" class="form-control" required>
                      </div>
                    </div>
                    
                    <div class="col-md-4">
                      <div class="form-group">
                        <label for="city">City</label>
                        <input type="text" id="city" name="city" class="form-control" required>
                      </div>
                    </div>
                    
                    <div class="col-md-4">
                      <div class="form-group">
                        <label for="state">State</label>
                        <input type="text" id="state" name="state" class="form-control" required>
                      </div>
                    </div>
                    
                    <div class="col-md-4">
                      <div class="form-group">
                        <label for="pincode">PIN Code</label>
                        <input type="text" id="pincode" name="pincode" class="form-control" required>
                      </div>
                    </div>
                    
                    <div class="col-md-12">
                      <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="defaultAddress" name="defaultAddress">
                        <label class="form-check-label" for="defaultAddress">Set as default address</label>
                      </div>
                    </div>
                    
                    <div class="col-md-12 mt-3">
                      <button type="submit" class="btn-save-address">
                        <i class='bx bx-save'></i> <span id="saveButtonText">Save Address</span>
                      </button>
                      <input type="hidden" id="addressIndex" value="-1">
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>
          
          <!-- Payment Methods Section -->
          <div class="checkout-section">
            <div class="section-header">
              <h3><i class='bx bx-credit-card'></i> Payment Method</h3>
            </div>
            
            <div class="section-body">
              <div class="payment-methods">
                <div class="payment-method-option">
                  <input type="radio" name="paymentMethod" id="creditCard" value="creditCard" checked>
                  <label for="creditCard" class="payment-method-label">
                    <div class="payment-method-icon">
                      <i class='bx bx-credit-card'></i>
                    </div>
                    <div class="payment-method-info">
                      <h4>Online Payment</h4>
                      <p>Pay securely using your card, UPI, or other digital payment methods.</p>
                    </div>
                  </label>
                </div>
                
                
                <% if (cart?.cartTotal + 100 < 1000) { %>
                  <div class="payment-method-option">
                    <input type="radio" name="paymentMethod" id="cashOnDelivery" value="cashOnDelivery">
                    <label for="cashOnDelivery" class="payment-method-label">
                      <div class="payment-method-icon">
                        <i class='bx bx-money'></i>
                      </div>
                      
                      <div class="payment-method-info">
                        <h4>Cash on Delivery</h4>
                        <p>Pay when your order is delivered</p>
                      </div>
                    </label>
                  </div>
                <% } else { %>
                  <div class="payment-method-option disabled">
                    <input type="radio" name="paymentMethod" id="cashOnDelivery" value="cashOnDelivery" disabled>
                    <label for="cashOnDelivery" class="payment-method-label dimmed">
                      <div class="payment-method-icon">
                        <i class='bx bx-money'></i>
                      </div>
                      
                      <div class="payment-method-info">
                        <h4>Cash on Delivery</h4>
                        <p>Not available for orders over ₹1000</p>
                      </div>
                    </label>
                  </div>
                <% } %>
                <div class="payment-method-option"> 
                  <input type="radio" name="paymentMethod" id="wallet" value="wallet" checked> 
                  <label for="wallet" class="payment-method-label"> 
                    <div class="payment-method-icon"> 
                      <i class='bx bx-wallet'></i> 
                    </div> 
                    <div class="payment-method-info"> 
                      <h4>Wallet Payment</h4> 
                      <p>Current Balance: <span id="walletBalance"><%= walletBalance %></span></p>
                    </div> 
                  </label> 
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Right Column - Order Summary -->
      <div class="col-lg-4">
        <div class="order-summary">
          <div class="summary-header">
            <h3>Order Summary</h3>
          </div>
          
          <div class="summary-body">
            <!-- Items Summary -->
            <div class="summary-items">
              <% if (cart && cart.item && cart.item.length > 0) { %>
                <div class="items-count">
                  <span><%= cart.item.length %> item<%= cart.item.length > 1 ? 's' : '' %> in your cart</span>
                  <a href="#" class="view-details-toggle" id="viewDetailsToggle">View Details <i class='bx bx-chevron-down'></i></a>
                </div>
                
                <div class="items-details" id="itemsDetailsList" style="display: none;">
                  <% cart.item.forEach(item => { %>
                    <div class="summary-item-row">
                      <div class="item-image">
                        <img src="/<%= item.productId.image[0] %>" alt="<%= item.productId.name %>">
                        <span class="item-quantity"><%= item.quantity %></span>
                      </div>
                      <div class="item-details">
                        <h4 class="item-name"><%= item.productId.name %></h4>
                        <p class="item-size">Size: <%= item.size %></p>
                      </div>
                      <div class="item-price">
                        Rs.<%= item.total.toLocaleString() %>
                      </div>
                    </div>
                  <% }); %>
                </div>
              <% } else { %>
                <div class="empty-cart-message">
                  <p>Your cart is empty. <a href="/shop">Continue shopping</a></p>
                </div>
              <% } %>
            </div>
            
            <!-- Price Breakdown -->
            <!-- Price Breakdown -->
<div class="price-breakdown">
  <div class="summary-divider"></div>
  
  <div class="summary-row">
    <span class="label">Subtotal</span>
    <span class="value">Rs.<%= cart && cart.cartTotal ? cart.cartTotal.toLocaleString() : 0 %></span>
  </div>
  
  <div class="summary-row">
    <span class="label">Shipping</span>
    <span class="value">
      <% if (cart && cart.cartTotal && cart.cartTotal > 10000) { %>
        <span class="free-shipping">Free</span>
      <% } else { %>
        Rs.100
      <% } %>
    </span>
  </div>
  
  <% if (appliedCoupon) { %>
  <div class="summary-row discount-row">
    <span class="label">Discount (<%= appliedCoupon.couponCode %>)</span>
    <span class="value discount-amount">-Rs.<%= appliedCoupon.discountAmount.toFixed(2) %></span>
  </div>
  <% } %>
  
  <div class="summary-divider"></div>
  
  <div class="summary-row total-row">
    <span class="label">Total</span>
    <span class="value" id="orderTotal">
      <% 
      let finalTotal = 0;
      if (cart && cart.cartTotal) {
        finalTotal = cart.cartTotal > 10000 ? cart.cartTotal : cart.cartTotal + 100;
        
        // Apply discount if coupon is applied
        if (appliedCoupon) {
          finalTotal -= appliedCoupon.discountAmount;
        }
      }
      %>
      Rs.<%= finalTotal.toLocaleString() %>
    </span>
  </div>
</div>
            
            <!-- Coupon Section -->
            <!-- Coupon Section -->
<div class="coupon-section">
  <div class="coupon-toggle" id="couponToggle">
    <i class='bx bx-tag-alt'></i> Apply Coupon
    <i class='bx bx-chevron-down toggle-icon'></i>
  </div>
  
  <div class="coupon-form" id="couponForm" style="display: none;">
    <% if (appliedCoupon) { %>
      <div class="applied-coupon">
        <div class="applied-coupon-code">
          <span class="coupon-badge"><i class='bx bx-check'></i> APPLIED:</span> 
          <span class="code-text"><%= appliedCoupon.couponCode %></span>
        </div>
        <div class="coupon-discount-amount">
          -Rs.<%= appliedCoupon.discountAmount.toFixed(2) %>
        </div>
        <button type="button" class="btn-remove-coupon" onclick="removeCoupon()">
          <i class='bx bx-x'></i>
        </button>
      </div>
    <% } else { %>
      <div class="input-group">
        <input type="text" class="form-control" placeholder="Enter coupon code" id="couponCode">
        <div class="input-group-append">
          <button class="btn-apply-coupon" type="button" onclick="applyCoupon()">Apply</button>
        </div>
      </div>
      <div class="coupon-actions">
        <button type="button" class="btn-view-coupons" id="viewCouponsBtn">
          <i class='bx bx-list-ul'></i> View Available Coupons
        </button>
      </div>
    <% } %>
    <div class="coupon-message" id="couponMessage"></div>
  </div>
</div>
          </div>
          
          <div class="summary-footer">
            <button type="button" id="placeOrderBtn" class="btn-place-order">
              <span>Place Order</span>
              <i class='bx bx-check-circle'></i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- End Checkout Area -->

<!-- Payment Modal (Credit Card) -->
<div class="payment-modal" id="paymentModal">
  <div class="payment-modal-overlay"></div>
  <div class="payment-modal-content">
    <div class="payment-card-container">
      <!-- Credit Card Design -->
      <div class="credit-card">
        <div class="credit-card-inner">
          <div class="card-front">
            <div class="card-logo">
              <i class='bx bxl-visa'></i>
            </div>
            <div class="card-chip">
              <i class='bx bxs-microchip'></i>
            </div>
            <div class="card-number" id="cardNumberDisplay">•••• •••• •••• ••••</div>
            <div class="card-info">
              <div class="card-holder">
                <div class="label">Card Holder</div>
                <div class="value" id="cardHolderDisplay">YOUR NAME</div>
              </div>
              <div class="card-expiry">
                <div class="label">Expires</div>
                <div class="value" id="cardExpiryDisplay">MM/YY</div>
              </div>
            </div>
          </div>
          <div class="card-back">
            <div class="card-stripe"></div>
            <div class="card-signature">
              <div class="signature-line"></div>
              <div class="cvc" id="cardCvcDisplay">•••</div>
            </div>
            <div class="card-info-back">
              <p>This card is property of your bank. Authorized signature - not valid unless signed</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Payment Form -->
      <div class="payment-form">
        <div class="form-header">
          <h3>Enter Payment Details</h3>
          <button type="button" class="close-modal" id="closePaymentModal">
            <i class='bx bx-x'></i>
          </button>
        </div>
        
        <form id="cardPaymentForm">
          <div class="form-group">
            <label for="cardNumber">Card Number</label>
            <div class="input-with-icon">
              <i class='bx bx-credit-card'></i>
              <input type="text" id="cardNumber" class="form-control" placeholder="1234 5678 9012 3456" maxlength="19" onkeyup="formatCardNumber(this)">
            </div>
          </div>
          
          <div class="form-group">
            <label for="cardHolder">Card Holder Name</label>
            <div class="input-with-icon">
              <i class='bx bx-user'></i>
              <input type="text" id="cardHolder" class="form-control" placeholder="Name on card">
            </div>
          </div>
          
          <div class="row">
            <div class="col-7">
              <div class="form-group">
                <label for="expiryDate">Expiry Date</label>
                <div class="input-with-icon">
                  <i class='bx bx-calendar'></i>
                  <input type="text" id="expiryDate" class="form-control" placeholder="MM/YY" maxlength="5" onkeyup="formatExpiryDate(this)">
                </div>
              </div>
            </div>
            
            <div class="col-5">
              <div class="form-group">
                <label for="cvv">CVV</label>
                <div class="input-with-icon">
                  <i class='bx bx-lock'></i>
                  <input type="text" id="cvv" class="form-control" placeholder="123" maxlength="3">
                </div>
              </div>
            </div>
          </div>
          
          <div class="form-group">
            <div class="save-card-checkbox">
              <input type="checkbox" id="saveCard">
              <label for="saveCard">Save card for future payments</label>
            </div>
          </div>
          
          <button type="submit" class="btn-pay">
            <span>Pay Rs.<span id="paymentAmount">0</span></span>
            <i class='bx bx-lock-alt'></i>
          </button>
        </form>
      </div>
    </div>
  </div>
</div>





<!-- Coupon Modal -->
<div class="coupon-modal" id="couponModal">
  <div class="coupon-modal-overlay"></div>
  <div class="coupon-modal-content">
    <div class="coupon-modal-header">
      <h3>Available Coupons</h3>
      <button type="button" class="close-modal" id="closeCouponModal">
        <i class='bx bx-x'></i>
      </button>
    </div>
    <div class="coupon-modal-body">
      <% if (coupons && coupons.length > 0) { %>
        <div class="coupon-list">
          <% coupons.forEach(coupon => { %>
            <div class="coupon-card">
              <div class="coupon-card-left">
                <div class="coupon-code"><%= coupon.couponCode %></div>
                <div class="coupon-expiry">Valid till: <%= new Date(coupon.expiry).toLocaleDateString() %></div>
              </div>
              <div class="coupon-card-right">
                <div class="coupon-discount">
                  <% if (coupon.type === 'percentageDiscount') { %>
                    <%= coupon.discount %>% OFF
                  <% } else { %>
                    Rs.<%= coupon.discount %> OFF
                  <% } %>
                </div>
                <div class="coupon-min">Min. Purchase: Rs.<%= coupon.minPurchase %></div>
                <button class="btn-apply" onclick="applyCouponFromModal('<%= coupon.couponCode %>')">
                  APPLY
                </button>
              </div>
              <div class="coupon-description"><%= coupon.description %></div>
            </div>
          <% }); %>
        </div>
      <% } else { %>
        <div class="no-coupons">
          <div class="no-coupons-icon">
            <i class='bx bx-tag-alt'></i>
          </div>
          <p>No coupons available at the moment</p>
        </div>
      <% } %>
    </div>
  </div>
</div>



<!-- Add Razorpay SDK -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<!-- End Facility Area -->
<script>// View Details Toggle
    document.getElementById('viewDetailsToggle').addEventListener('click', function(e) {
      e.preventDefault();
      const detailsList = document.getElementById('itemsDetailsList');
      const toggleIcon = this.querySelector('i');
      
      if (detailsList.style.display === 'none') {
        detailsList.style.display = 'block';
        toggleIcon.classList.remove('bx-chevron-down');
        toggleIcon.classList.add('bx-chevron-up');
        this.textContent = 'Hide Details ';
        this.appendChild(toggleIcon);
      } else {
        detailsList.style.display = 'none';
        toggleIcon.classList.remove('bx-chevron-up');
        toggleIcon.classList.add('bx-chevron-down');
        this.textContent = 'View Details ';
        this.appendChild(toggleIcon);
      }
    });
    
    // Coupon Toggle
    document.getElementById('couponToggle').addEventListener('click', function() {
      const couponForm = document.getElementById('couponForm');
      const toggleIcon = this.querySelector('.toggle-icon');
      
      if (couponForm.style.display === 'none') {
        couponForm.style.display = 'block';
        toggleIcon.classList.remove('bx-chevron-down');
        toggleIcon.classList.add('bx-chevron-up');
      } else {
        couponForm.style.display = 'none';
        toggleIcon.classList.remove('bx-chevron-up');
        toggleIcon.classList.add('bx-chevron-down');
      }
    });
    
    // Address Form Toggle
    // Show address form when clicking "Add Address" button
document.getElementById('addAddressBtn').addEventListener('click', function() {
    const formContainer = document.getElementById('addressFormContainer');
    formContainer.style.display = 'block';
    document.getElementById('addressFormTitle').textContent = 'Add New Address';
    document.getElementById('saveButtonText').textContent = 'Save Address';
    document.getElementById('addressForm').reset();
    document.getElementById('addressIndex').value = '-1';
});

// Close address form
document.getElementById('closeAddressForm').addEventListener('click', function() {
    document.getElementById('addressFormContainer').style.display = 'none';
});

// Address Form Submission
document.getElementById('addressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const addressData = {
        name: document.getElementById('name').value,
        email: document.getElementById('email')?.value || '', 
        number: document.getElementById('phone').value,
        street: document.getElementById('street').value,
        city: document.getElementById('city').value,
        state: document.getElementById('state').value,
        country: document.getElementById('country')?.value || 'India', 
        pincode: document.getElementById('pincode').value,
        saveAs: document.getElementById('saveAs')?.value || 'Home', 
        isDefault: document.getElementById('defaultAddress').checked
    };

    try {
        const response = await fetch('/addaddressincheckout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(addressData)
        });

        if (response.ok) {
            const result = await response.json();
            Swal.fire(
                'Success!',
                'Your address has been saved.',
                'success'
            ).then(() => {
                document.getElementById('addressFormContainer').style.display = 'none';
                document.getElementById('addressForm').reset();
                // Add function to refresh address list if needed
                // e.g., refreshAddressList();
                location.reload()
            });
        } else {
            const errorData = await response.json();
            Swal.fire(
                'Error!',
                errorData.message || 'Failed to save address.',
                'error'
            );
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire(
            'Error!',
            'An error occurred while saving the address.',
            'error'
        );
    }
});
    
    // Apply Coupon
    function applyCoupon() {
      const couponCode = document.getElementById('couponCode').value.trim();
      const couponMessage = document.getElementById('couponMessage');
      
      if (!couponCode) {
        couponMessage.innerHTML = '<span class="text-danger">Please enter a coupon code</span>';
        return;
      }
      
      // Simulate coupon validation with a timeout
      couponMessage.innerHTML = '<span class="text-info">Validating coupon...</span>';
      
      setTimeout(() => {
        // Example coupon validation (in a real app, this would be server-side)
        if (couponCode.toUpperCase() === 'WELCOME10') {
          // Display discount in the order summary
          document.getElementById('discountRow').style.display = 'flex';
          document.getElementById('discountAmount').textContent = '-Rs.500';
          
          // Update total (in a real app, you would calculate this properly)
          const currentTotal = parseFloat(document.getElementById('orderTotal').textContent.replace('Rs.', '').replace(',', ''));
          const newTotal = currentTotal - 500;
          document.getElementById('orderTotal').textContent = 'Rs.' + newTotal.toLocaleString();
          document.getElementById('paymentAmount').textContent = newTotal.toLocaleString();
          
          couponMessage.innerHTML = '<span class="text-success">Coupon applied successfully!</span>';
        } else {
          couponMessage.innerHTML = '<span class="text-danger">Invalid coupon code</span>';
        }
      }, 1000);
    }
    
   // Place Order Button
document.getElementById('placeOrderBtn').addEventListener('click', function() {
  // Check if address is selected
  const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
  if (!selectedAddress && document.querySelectorAll('.address-card').length > 0) {
    Swal.fire('Error', 'Please select a delivery address', 'error');
    return;
  }
  
  // Check if payment method is selected
  const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
  if (!selectedPayment) {
    Swal.fire('Error', 'Please select a payment method', 'error');
    return;
  }
  
  const addressId = selectedAddress ? selectedAddress.value : null;
  
  // Handle different payment methods
  switch (selectedPayment.value) {
    case 'creditCard':
    case 'netBanking':
    case 'upi':
      // Use Razorpay for online payments
      payNow();
      break;
      
    case 'cashOnDelivery':
      // For COD, just confirm and proceed
      Swal.fire({
        title: 'Confirm Order',
        text: 'Do you want to place this order with Cash on Delivery?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#000000',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Place Order'
      }).then((result) => {
        if (result.isConfirmed) {
          processOrder(addressId, 'Cash On Delivery');
        }
      });
      break;
      
      case 'wallet':
  console.log("Entering wallet payment");

  // Get wallet balance via AJAX
  fetch('/wallet/balance')
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch wallet balance');
      }
      return response.json();
    })
    .then(data => {
      const walletBalance = parseFloat(data.balance) || 0;

      // Get cart total from orderTotal element
      const orderTotalText = document.getElementById('orderTotal').textContent.trim();
      const cartTotal = parseFloat(orderTotalText.replace('Rs.', '').replace(/,/g, ''));

      console.log("Wallet Balance:", walletBalance);
      console.log("Cart Total:", cartTotal);

      // Check if wallet balance is sufficient
      if (isNaN(cartTotal) || cartTotal <= 0) {
        Swal.fire('Error', 'Invalid cart total. Please refresh the page and try again.', 'error');
        return;
      }

      if (walletBalance < cartTotal) {
        Swal.fire('Insufficient Balance', 'Your wallet balance is insufficient for this purchase.', 'error');
        return;
      }

      // Proceed with confirmation dialog
      Swal.fire({
        title: 'Confirm Wallet Payment',
        text: `Do you want to pay ₹${cartTotal.toFixed(2)} using your wallet balance?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#000000',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Pay Now'
      }).then((result) => {
        if (result.isConfirmed) {
          processOrder(addressId, 'Wallet');
        }
      });
    })
    .catch(error => {
      console.error("Error fetching wallet balance:", error);
      Swal.fire('Error', 'Could not verify wallet balance. Please try again.', 'error');
    });
  break;
      
    default:
      Swal.fire('Coming Soon', 'This payment method will be available soon', 'info');
  }
});
    
    // Close Payment Modal
    document.getElementById('closePaymentModal').addEventListener('click', function() {
      document.getElementById('paymentModal').style.display = 'none';
    });
    
    // Credit Card Form Validation and Submission
    document.getElementById('cardPaymentForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Basic validation (in a real app, you would do more thorough validation)
      const cardNumber = document.getElementById('cardNumber').value.replace(/\s/g, '');
      const cardHolder = document.getElementById('cardHolder').value;
      const expiryDate = document.getElementById('expiryDate').value;
      const cvv = document.getElementById('cvv').value;
      
      if (cardNumber.length !== 16 || !/^\d+$/.test(cardNumber)) {
        Swal.fire('Error', 'Please enter a valid 16-digit card number', 'error');
        return;
      }
      
      if (!cardHolder) {
        Swal.fire('Error', 'Please enter the card holder name', 'error');
        return;
      }
      
      if (!expiryDate || expiryDate.length !== 5 || expiryDate.charAt(2) !== '/') {
        Swal.fire('Error', 'Please enter a valid expiry date (MM/YY)', 'error');
        return;
      }
      
      if (!cvv || cvv.length !== 3 || !/^\d+$/.test(cvv)) {
        Swal.fire('Error', 'Please enter a valid 3-digit CVV', 'error');
        return;
      }
      
      // Process payment (in a real app, you would send this to a payment processor)
      document.getElementById('paymentModal').style.display = 'none';
      processOrder();
    });

 // Modified payNow function with enhanced error handling
// In your checkout.ejs script section, update the payNow function
function payNow() {
  const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
  const addressId = selectedAddress ? selectedAddress.value : null;
  
  if (!addressId) {
    Swal.fire('Error', 'Please select a delivery address', 'error');
    return;
  }

  Swal.fire({
    title: 'Processing',
    text: 'Preparing your payment...',
    allowOutsideClick: false,
    didOpen: () => {
      Swal.showLoading();
    }
  });
  
  const orderTotal = document.getElementById('orderTotal').textContent.replace('Rs.', '').replace(/,/g, '');

  fetch('/create-order', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ 
      amount: parseFloat(orderTotal) * 100,
      addressId: addressId
    })
  })
  .then(response => response.json())
  .then(order => {
    Swal.close();
    const options = {
      key: order.key_id,
      amount: order.amount,
      currency: order.currency,
      name: 'Attiro Fashions',
      description: 'Fashion Purchase',
      order_id: order.id,
      handler: function (response) {
        processOrder(addressId, 'razorpay', response.razorpay_payment_id, response.razorpay_order_id);
      },
      modal: {
        ondismiss: function() {
          Swal.fire({
            title: 'Payment Cancelled',
            text: 'You closed the payment window.',
            icon: 'warning'
          });
        }
      },
      prefill: {
        name: document.getElementById('name')?.value || '',
        email: '',
        contact: document.getElementById('phone')?.value || ''
      },
      theme: {
        color: '#000000'
      }
    };

    const rzp = new Razorpay(options);
    
    rzp.on('payment.failed', function (response) {
      // Process the order with failed status
      fetch('/orderplaced', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          addressId: addressId,
          paymentMethod: 'razorpay',
          paymentId: response.error.metadata.payment_id,
          razorpayOrderId: null
        })
      })
      .then(response => response.json())
      .then(data => {
        // Redirect to failure page
        window.location.href = `/order-failure?id=${data.orderId}`;
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'Failed to process failed payment', 'error');
      });
    });
    
    rzp.open();
  })
  .catch(error => {
    console.error('Error:', error);
    Swal.fire('Error', 'Payment initiation failed', 'error');
  });
}

// Update processOrder to redirect to success page
function processOrder(addressId, paymentMethod, paymentId = null, orderId = null) {
  Swal.fire({
    title: 'Processing',
    text: 'Please wait while we process your order...',
    allowOutsideClick: false,
    didOpen: () => {
      Swal.showLoading();
    }
  });
  
  if (paymentMethod === 'wallet') {
    paymentMethod = 'Wallet';
  } else if (paymentMethod === 'cashOnDelivery') {
    paymentMethod = 'Cash On Delivery';
  }

  const paymentData = {
    addressId: addressId,
    paymentMethod: paymentMethod
  };
  
  if (paymentId) paymentData.paymentId = paymentId;
  if (orderId) paymentData.razorpayOrderId = orderId;

  fetch('/orderplaced', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(paymentData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Order processing failed');
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      Swal.close();
      window.location.href = '/placeorder?id=' + data.orderId;
    } else {
      throw new Error(data.error || 'Order processing failed');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    Swal.fire('Error', error.message, 'error');
  });
}// You can remove or comment out the existing code that sends address to '/orderplaced'
// In the current event listener for address radio buttons
document.addEventListener('DOMContentLoaded', function() {
  // Get all address radio buttons
  const addressRadios = document.querySelectorAll('input[name="selectedAddress"]');
  
  // Add change event listeners to all radio buttons
  addressRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      if (this.checked) {
        // Highlight the selected address card visually
        document.querySelectorAll('.address-card').forEach(card => {
          card.classList.remove('selected');
        });
        this.closest('.address-card').classList.add('selected');
        
        // No need to send the address to the backend here anymore
        // We'll send it when the user clicks "Place Order"
      }
    });
  });
});

// Coupon Modal Toggle
document.getElementById('viewCouponsBtn').addEventListener('click', function() {
  document.getElementById('couponModal').style.display = 'block';
});

document.getElementById('closeCouponModal').addEventListener('click', function() {
  document.getElementById('couponModal').style.display = 'none';
});

// Close modal when clicking on overlay
document.querySelector('.coupon-modal-overlay').addEventListener('click', function() {
  document.getElementById('couponModal').style.display = 'none';
});

// Apply Coupon from Modal
function applyCouponFromModal(couponCode) {
  document.getElementById('couponCode').value = couponCode;
  document.getElementById('couponModal').style.display = 'none';
  applyCoupon();
}

// Apply Coupon
function applyCoupon() {
  const couponCode = document.getElementById('couponCode').value.trim();
  const couponMessage = document.getElementById('couponMessage');
  
  if (!couponCode) {
    couponMessage.innerHTML = '<span class="text-danger">Please enter a coupon code</span>';
    return;
  }
  
  // Get cart total
  const cartTotal =' <%= cart && cart.cartTotal ? cart.cartTotal : 0 %>';
  
  couponMessage.innerHTML = '<span class="text-info">Validating coupon...</span>';
  
  // Send AJAX request to validate coupon
  fetch('/apply-coupon', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      couponCode: couponCode,
      cartTotal: cartTotal
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Refresh the page to show applied coupon
      window.location.reload();
    } else {
      couponMessage.innerHTML = `<span class="text-danger">${data.message}</span>`;
    }
  })
  .catch(error => {
    console.error('Error:', error);
    couponMessage.innerHTML = '<span class="text-danger">Failed to apply coupon. Please try again.</span>';
  });
}

// Remove Coupon
function removeCoupon() {
  fetch('/remove-coupon', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Refresh the page
      window.location.reload();
    }
  })
  .catch(error => {
    console.error('Error:', error);
    Swal.fire('Error', 'Failed to remove coupon', 'error');
  });
}

// Add this to your checkout page JavaScript
document.addEventListener('DOMContentLoaded', function() {
  // Get the wallet balance from the server (passed during render)
  const walletBalance = parseFloat("<%- walletBalance %>") || 0;
  
  // Display the wallet balance
  document.getElementById('walletBalance').textContent = `₹${walletBalance.toFixed(2)}`;
  
  // Get cart total (add shipping cost if needed)
  const cartTotal = parseFloat("<%- cart?.cartTotal %>") || 0;
  const totalWithShipping = cartTotal + 100; // Assuming 100 is shipping cost
  
  // Get wallet payment option
  const walletOption = document.getElementById('wallet');
  
  // Check if wallet has sufficient balance
  if (walletBalance < totalWithShipping) {
    // Disable wallet option if balance is insufficient
    walletOption.disabled = true;
    document.querySelector('label[for="wallet"] p').innerHTML = 
      `Current Balance: ₹${walletBalance.toFixed(2)} <span class="text-danger">(Insufficient funds)</span>`;
  } else {
    document.querySelector('label[for="wallet"] p').innerHTML = 
      `Current Balance: ₹${walletBalance.toFixed(2)} <span class="text-success">(Sufficient funds)</span>`;
  }
});

function addAddress(){
  window.location.href="/addaddress"
}
    </script>

    <%- include('../partials/user/footer') %>