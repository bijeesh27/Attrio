<%- include('../partials/user/header') %>
<style>
  /* Center search styles */
  .search-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px 0;
    width: 100%;
  }
  
  .search-form {
    position: relative;
    width: 60%;
    max-width: 600px;
  }
  
  .search-input {
    width: 100%;
    padding: 12px 50px 12px 20px;
    border: 2px solid #e6e6e6;
    border-radius: 30px;
    font-size: 16px;
    transition: all 0.3s;
  }
  
  .search-input:focus {
    border-color: #333;
    outline: none;
    box-shadow: 0 0 8px rgba(0,0,0,0.1);
  }
  
  .search-button {
    position: absolute;
    right: 5px;
    top: 5px;
    background-color: #333;
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s;
  }
  
  .search-button:hover {
    background-color: #555;
  }
  
  .clear-filter {
    margin-left: 10px;
    padding: 5px 15px;
    background-color: #f1f1f1;
    border: 1px solid #ddd;
    border-radius: 30px;
    font-size: 13px;
    cursor: pointer;
    transition: all 0.3s;
    display: inline-flex;
    align-items: center;
  }
  
  .clear-filter:hover {
    background-color: #e1e1e1;
  }
  
  .clear-filter i {
    margin-right: 5px;
  }
  
  .active-filters {
    display: flex;
    flex-wrap: wrap;
    margin: 10px 0;
    justify-content: center;
  }

  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 20px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    z-index: 9999;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    animation: fadeIn 0.3s ease;
    transition: opacity 0.3s ease;
  }

  .notification.success {
    background-color: #4CAF50;
    color: white;
  }

  .notification.error {
    background-color: #F44336;
    color: white;
  }

  .notification .close-btn {
    background: none;
    border: none;
    color: white;
    font-size: 20px;
    cursor: pointer;
    margin-left: 10px;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .product-sizes {
    position: absolute;
    bottom: 10px;
    left: 0;
    right: 0;
    text-align: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .single-productsBox .products-image:hover .product-sizes {
    opacity: 1;
  }

  .size-selection {
    margin-bottom: 10px;
  }

  .size-buttons {
    display: flex;
    justify-content: center;
    gap: 10px;
  }

  .size-btn {
    background-color: rgba(255,255,255,0.8);
    border: 1px solid #ddd;
    padding: 5px 10px;
    font-size: 12px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .size-btn:hover {
    background-color: #f0f0f0;
  }

  .size-btn.selected {
    background-color: #000;
    color: #fff;
  }
  /* General Responsive Styles */
@media (max-width: 768px) {
  /* Container adjustments */
  .container {
    padding-left: 15px;
    padding-right: 15px;
  }
  
  /* Search container responsive adjustments */
  .search-container {
    margin: 15px 0;
  }
  
  .search-form {
    width: 90%;
    max-width: 100%;
  }
  
  .search-input {
    padding: 10px 45px 10px 15px;
    font-size: 14px;
  }
  
  .search-button {
    width: 35px;
    height: 35px;
  }
  
  /* Active filters adjustments */
  .active-filters {
    flex-direction: column;
    align-items: center;
  }
  
  .clear-filter {
    margin: 5px;
    font-size: 12px;
  }
  
  /* Products filter options */
  .products-filter-options .row {
    flex-direction: column;
  }
  
  .products-filter-options .col-lg-4 {
    width: 100%;
    text-align: center;
    margin-bottom: 10px;
  }
  
  .view-list-row {
    justify-content: center;
    margin-top: 10px;
  }
  
  .products-ordering-list {
    margin: 10px auto;
    width: 100%;
    max-width: 250px;
  }
  
  .products-ordering-list select {
    width: 100%;
  }
  
  /* Product grid adjustments */
  .col-lg-4.col-md-6.col-sm-6.products-col-item {
    padding-left: 10px;
    padding-right: 10px;
  }
  
  .single-productsBox {
    margin-bottom: 20px;
  }
  
  .products-image img {
    width: 100%;
    height: auto;
  }
  
  /* Size selection buttons */
  .size-buttons {
    gap: 5px;
  }
  
  .size-btn {
    padding: 4px 8px;
    font-size: 11px;
  }
  
  /* Pagination adjustments */
  .pagination-area {
    margin-top: 20px;
  }
  
  .pagination-numbers {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 5px;
  }
  
  .pagination-number {
    width: 30px;
    height: 30px;
    font-size: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .pagination-arrow {
    width: 30px;
    height: 30px;
  }
  
  .pagination-info {
    margin-top: 10px;
    font-size: 12px;
  }
  
  /* Notification adjustments */
  .notification {
    width: 90%;
    right: 5%;
    left: 5%;
    font-size: 14px;
    padding: 12px 15px;
  }
}

/* Extra Small Devices (phones) */
@media (max-width: 576px) {
  /* Product grid for very small screens */
  .col-lg-4.col-md-6.col-sm-6.products-col-item {
    width: 100%;
  }
  
  /* Improved touch targets */
  .add-to-cart {
    padding: 10px;
    margin: 10px 0;
    display: block;
    text-align: center;
    font-size: 14px;
  }
  
  .products-button ul li a {
    width: 35px;
    height: 35px;
  }
  
  /* Filter modal adjustments */
  .productsFilterModal .modal-dialog {
    max-width: 85%;
  }
  
  /* Pagination for very small screens */
  .pagination-numbers .pagination-number:not(.active):not(:first-child):not(:last-child) {
    display: none;
  }
  
  /* Product content spacing */
  .products-content h3 {
    font-size: 16px;
    margin-bottom: 5px;
  }
  
  .star-rating {
    font-size: 14px;
    margin-bottom: 5px;
  }
  
  .price {
    margin-bottom: 10px;
  }
  
  .old-price, .new-price {
    font-size: 14px;
  }
}

/* Fix for filter modal on mobile */
.modal.left .modal-dialog {
  position: fixed;
  margin: auto;
  width: 300px;
  height: 100%;
  transform: translate3d(0%, 0, 0);
}

.modal.left .modal-content {
  height: 100%;
  overflow-y: auto;
}

/* Improve the wishlist and quick view button size for touch */
@media (max-width: 768px) {
  .products-button ul li {
    margin: 3px;
  }
  
  .wishlist-btn a, .quick-view-btn a {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .products-discount span {
    padding: 3px 10px;
    font-size: 11px;
  }
  
  /* Improve "New!" tag visibility */
  .new-tag {
    padding: 2px 8px;
    font-size: 10px;
  }
}

/* Better hover states for touch devices */
@media (hover: none) {
  .single-productsBox .products-image .product-sizes {
    opacity: 1;
  }
  
  .add-to-cart:hover {
    opacity: 0.9;
  }
}

/* Grid view adjustment for different screen sizes */
@media (min-width: 577px) and (max-width: 767px) {
  .col-lg-4.col-md-6.col-sm-6.products-col-item {
    width: 50%;
  }
}

/* Font size adjustments for smaller screens */
@media (max-width: 480px) {
  .page-title-content h2 {
    font-size: 24px;
  }
  
  .page-title-content ul li {
    font-size: 14px;
  }
  
  .products-content h3 a {
    font-size: 15px;
  }
}
</style>
<body>
  
  <!-- Start Page Title -->
  <div class="page-title-area">
    <div class="container">
      <div class="page-title-content">
        <h2>products</h2>
        <ul>
          <li><a href="/">Home</a></li>
          <li>Products</li>
        </ul>
      </div>
    </div>
  </div>
  <!-- End Page Title -->
  
  <!-- Start Professional Search Area -->
  <div class="search-container">
    <form class="search-form" action="/shop" method="GET">
      <input
        type="text"
        class="search-input"
        placeholder="Search products..."
        name="query"
        value="<%= query || '' %>"
      />
      <!-- Preserve other filters -->
      <% if (categoryId) { %>
        <input type="hidden" name="categoryId" value="<%= categoryId %>">
      <% } %>
      <% if (sort) { %>
        <input type="hidden" name="sort" value="<%= sort %>">
      <% } %>
      <!-- Reset to page 1 when searching -->
      <input type="hidden" name="page" value="1">
      
      <button type="submit" class="search-button"><i class="bx bx-search"></i></button>
    </form>
  </div>
  
  <!-- Active Filters Area -->
  <div class="active-filters container">
    <% if (query || categoryId || sort) { %>
      <div>
        <% if (query) { %>
          <span class="clear-filter">
            Search: <%= query %>
            <a href="/shop?<%= categoryId ? 'categoryId=' + categoryId : '' %><%= sort ? (categoryId ? '&sort=' : 'sort=') + sort : '' %>&page=1" title="Remove search filter"><i class="bx bx-x"></i></a>
          </span>
        <% } %>
        
        <% if (categoryId) { %>
          <% 
            let categoryName = "";
            categories.forEach(cat => {
              if (cat._id.toString() === categoryId.toString()) {
                categoryName = cat.name;
              }
            });
          %>
          <span class="clear-filter">
            Category: <%= categoryName %>
            <a href="/shop?<%= query ? 'query=' + query : '' %><%= sort ? (query ? '&sort=' : 'sort=') + sort : '' %>&page=1" title="Remove category filter"><i class="bx bx-x"></i></a>
          </span>
        <% } %>
        
        <% if (sort) { %>
          <% 
            let sortLabel = "";
            if(sort === 'a-z') sortLabel = "Name: A-Z";
            else if(sort === 'z-a') sortLabel = "Name: Z-A";
            else if(sort === 'l-h') sortLabel = "Price: Low to High";
            else if(sort === 'h-l') sortLabel = "Price: High to Low";
            else sortLabel = sort;
          %>
          <span class="clear-filter">
            Sort: <%= sortLabel %>
            <a href="/shop?<%= query ? 'query=' + query : '' %><%= categoryId ? (query ? '&categoryId=' : 'categoryId=') + categoryId : '' %>&page=1" title="Remove sorting"><i class="bx bx-x"></i></a>
          </span>
        <% } %>
        
        <a href="/shop" class="clear-filter">
          <i class="bx bx-refresh"></i> Clear All Filters
        </a>
      </div>
    <% } %>
  </div>
  <!-- End Active Filters Area -->

  <!-- Start Products Area -->
  <section class="products-area pt-100 pb-70">
    <div class="container">
      <div class="products-filter-options">
        <div class="row align-items-center justify-content-center">
          <div class="col-lg-4 col-md-4">
            <div class="d-lg-flex d-md-flex align-items-center">
              <span class="sub-title"
                ><a
                  href="#"
                  data-bs-toggle="modal"
                  data-bs-target="#productsFilterModal"
                  ><i class="bx bx-filter-alt"></i> Filter</a
                ></span
              >

              <span class="sub-title d-none d-lg-block d-md-block">View:</span>

              <div class="view-list-row d-none d-lg-block d-md-block">
                <div class="view-column">
                  <a href="#" class="icon-view-two">
                    <span></span>
                    <span></span>
                  </a>

                  <a href="#" class="icon-view-three active">
                    <span></span>
                    <span></span>
                    <span></span>
                  </a>

                  <a href="#" class="icon-view-four">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                  </a>

                  <a href="#" class="view-grid-switch">
                    <span></span>
                    <span></span>
                  </a>
                </div>
              </div>
            </div>
          </div>

          <div class="col-lg-4 col-md-4">
            <p>Showing 1 – 18 of <%= totalProducts %></p>
          </div>

          <div class="col-lg-4 col-md-4">
            <div class="products-ordering-list">
              <select id="sortSelect" onchange="sortProducts()">
                <option value="">Sort By</option>
                <option value="a-z" <%= sort === 'a-z' ? 'selected' : '' %>>Sort by Name: A-Z</option>
                <option value="z-a" <%= sort === 'z-a' ? 'selected' : '' %>>Sort by Name: Z-A</option>
                <option value="l-h" <%= sort === 'l-h' ? 'selected' : '' %>>Sort by Price: Low to High</option>
                <option value="h-l" <%= sort === 'h-l' ? 'selected' : '' %>>Sort by Price: High to Low</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <div id="products-collections-filter" class="row">
        <% products.forEach(product => { %>
        <div class="col-lg-4 col-md-6 col-sm-6 products-col-item">
          <div class="single-productsBox">
            <div class="products-image">
              <a href="/shopsingle/<%= product._id %>">
                <img
                  src="/<%= product.image[0] %>"
                  class="main-image"
                  alt="image"
                />
                <img
                  src="/<%= product.image[1] %>"
                  class="hover-image"
                  alt="image"
                />
              </a>

              <div class="products-button">
                <ul>
                  <li>
                    <div class="wishlist-btn" data-product-id="<%= product._id %>">
                      <a>
                          <% if (wishlistProduct && wishlistProduct.length > 0) { %>
                              <%
                              let isInWishlist = false;
                              wishlistProduct.forEach((item) => {
                                  if (item.toString() === product._id.toString()) {
                                      isInWishlist = true;
                                  }
                              });
                              
                              if (isInWishlist) { %>
                                  <i class='bx bxs-heart'></i>
                              <% } else { %>
                                  <i class='bx bx-heart'></i>
                              <% } %>
                          <% } else { %>
                              <i class='bx bx-heart'></i>
                          <% } %>
                          <span class="tooltip-label">Add to Wishlist</span>
                      </a>
                  </div>
                  </li>
                  
                  <li>
                    <div class="quick-view-btn">
                      <a
                        href="#"
                        data-bs-toggle="modal"
                        data-bs-target="#productsQuickView"
                      >
                        <i class="bx bx-search-alt"></i>
                        <span class="tooltip-label">Quick View</span>
                      </a>
                    </div>
                  </li>
                </ul>
              </div>
              <% if (product.createdAt) { 
                const createdAtDate = new Date(product.createdAt);
                const fiveDaysAgo = new Date();
                fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);

                if (createdAtDate >= fiveDaysAgo) { 
              %>
                <div class="new-tag">New!</div>
              <% 
                } 
              } 
              %>
            </div>

            <div class="products-content">
              <div class="size-selection">
                <div class="size-buttons">
                  <button class="size-btn">S</button>
                  <button class="size-btn">M</button>
                  <button class="size-btn">L</button>
                  <button class="size-btn">XL</button>
                </div>
              </div>

              <h3>
                <a href="/shopsingle/<%= product._id %>"><%= product.name %></a>
              </h3>
              <div class="star-rating">
  <% for(let i = 1; i <= 5; i++) { %>
    <i class="bx <%= i <= Math.round(product.averageRating || 0) ? 'bxs-star' : 'bx-star' %>"></i>
  <% } %>
</div>
              <div class="price">
                <% if (product.discountedPrice) { %>
                  <span class="old-price">Rs.<%= product.originalPrice %></span>
                  <span class="new-price">Rs.<%= product.discountedPrice %></span>
                  <span class="products-discount"></span>
                <% } else { %>
                  <span class="new-price">Rs.<%= product.price %></span>
                <% } %>
              </div>

              <a href="#" class="add-to-cart" 
                data-product-id="<%= product._id %>" 
                data-product-name="<%= product.name %>"
              >Add to Cart</a>
            </div>
            <% if (product.discountedPrice) { %>
            <span class="products-discount">
              <span><%= product.discountPercentage %>% OFF</span>
            </span>
            <% } %>
          </div>
        </div>
        <% }) %>
      </div>

      <div class="pagination-area text-center">
        <% if (totalPages > 1) { %>
        <div class="pagination-container">
          <div class="pagination-area">
            <% 
              // Build the base query string that preserves all filters
              let queryString = '';
              if (query) queryString += `&query=${encodeURIComponent(query)}`;
              if (sort) queryString += `&sort=${encodeURIComponent(sort)}`;
              if (categoryId) queryString += `&categoryId=${encodeURIComponent(categoryId)}`;
            %>
            
            <a href="?page=<%= currentPage > 1 ? currentPage - 1 : 1 %><%= queryString %>" 
              class="pagination-arrow prev <%= currentPage === 1 ? 'disabled' : '' %>">
              <i class="bx bx-chevron-left"></i>
            </a>

            <div class="pagination-numbers">
              <% 
                // Show limited page numbers with ellipsis 
                const maxPagesToShow = 5; 
                let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2)); 
                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1); 
                
                // Adjust if we're near the end 
                if (endPage - startPage + 1 < maxPagesToShow) {
                  startPage = Math.max(1, endPage - maxPagesToShow + 1); 
                } 
                
                // Show first page if not included in range 
                if (startPage > 1) { 
              %>
                <a href="?page=1<%= queryString %>" class="pagination-number">1</a>
                <% if (startPage > 2) { %>
                  <span class="pagination-ellipsis">...</span>
                <% } %>
              <% } %>
              
              <% for(let i = startPage; i <= endPage; i++) { %>
                <% if(i === currentPage) { %>
                  <span class="pagination-number active"><%= i %></span>
                <% } else { %>
                  <a href="?page=<%= i %><%= queryString %>" class="pagination-number"><%= i %></a>
                <% } %>
              <% } %>
              
              <% if (endPage < totalPages) { %>
                <% if (endPage < totalPages - 1) { %>
                  <span class="pagination-ellipsis">...</span>
                <% } %>
                <a href="?page=<%= totalPages %><%= queryString %>" class="pagination-number"><%= totalPages %></a>
              <% } %>
            </div>

            <a href="?page=<%= currentPage < totalPages ? currentPage + 1 : totalPages %><%= queryString %>"
              class="pagination-arrow next <%= currentPage === totalPages ? 'disabled' : '' %>">
              <i class="bx bx-chevron-right"></i>
            </a>
          </div>

          <div class="pagination-info">
            Showing page <%= currentPage %> of <%= totalPages %>
          </div>
        </div>
        <% } %>
      </div>
    </div>
  </section>
  <!-- End Products Area -->

  <!-- Start Products Filter Modal Area -->
  <div
    class="modal left fade productsFilterModal"
    id="productsFilterModal"
    tabindex="-1"
    role="dialog"
  >
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <button
          type="button"
          class="close"
          data-bs-dismiss="modal"
          aria-label="Close"
        >
          <span aria-hidden="true"><i class="bx bx-x"></i> Close</span>
        </button>

        <div class="modal-body">
          <div class="woocommerce-widget-area">
            <div class="woocommerce-widget collections-list-widget">
              <h3 class="woocommerce-widget-title">Categories</h3>

              <ul class="collections-list-row">
                <% categories.forEach(category => { %>
                  <li>
                    <a href="/shop?categoryId=<%= category._id %>&query=<%= query %>&sort=<%= sort %>"><%= category.name %></a>
                  </li>
                <% }) %>
              </ul>
            </div>

            <div class="woocommerce-widget price-list-widget">
              <h3 class="woocommerce-widget-title">Price</h3>

              <div class="collection-filter-by-price">
                <input
                  class="js-range-of-price"
                  type="text"
                  data-min="0"
                  data-max="1055"
                  name="filter_by_price"
                  data-step="10"
                />
              </div>
            </div>
            
            <!-- Clear Filters Button -->
            <div class="woocommerce-widget mt-4">
              <a href="/shop" class="btn btn-dark w-100">Clear All Filters</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- End Products Filter Modal Area -->

  <script>
    function sortProducts() {
      const sortSelect = document.getElementById('sortSelect');
      const sortOption = sortSelect.value;
      const currentUrl = new URL(window.location.href);
      
      if (sortOption) {
        currentUrl.searchParams.set('sort', sortOption);
      } else {
        currentUrl.searchParams.delete('sort');
      }
      
      // Always reset to page 1 when sorting changes
      currentUrl.searchParams.set('page', '1');
      
      window.location.href = currentUrl.toString();
    }

    document.addEventListener('DOMContentLoaded', function() {
      initAddToCartButtons();
      initWishlistButtons(); // Existing wishlist initialization
    });

    function initWishlistButtons() {
      // Select all wishlist buttons
      const wishlistBtns = document.querySelectorAll('.wishlist-btn');
      
      wishlistBtns.forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.preventDefault();
          
          const productId = this.getAttribute('data-product-id');
          const size = this.getAttribute('data-size');
          const icon = this.querySelector('i');
          
          // Show loading state
          icon.className = 'bx bx-loader bx-spin';
          
          // Send AJAX request using Fetch API
          fetch('/addtowishlist', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              productId: productId,
              size: size
            })
          })
          .then(response => response.json())
          .then(data => {
            // Remove loading state
            icon.classList.remove('bx-loader', 'bx-spin');
            
            if (data.success) {
              // Update icon based on whether item is in wishlist
              if (data.in_wishlist) {
                icon.className = 'bx bxs-heart'; // Filled heart
                showNotification('success', 'Product added to wishlist');
              } else {
                icon.className = 'bx bx-heart'; // Empty heart
                showNotification('success', 'Product removed from wishlist');
              }
              
              // Update wishlist counter in header if exists
              const wishlistCount = document.querySelector('.wishlist-count');
              if (wishlistCount) {
                wishlistCount.textContent = data.wishlist_count;
              }
            } else {
              // If error, revert to original icon
              icon.className = 'bx bx-heart';
              
              // If login required, redirect to login page
              if (data.login_required) {
                window.location.href = '/login?redirect=' + encodeURIComponent(window.location.href);
                return;
              }
              
              // Show error message
              showNotification('error', data.message || 'Error updating wishlist');
            }
          })
          .catch(error => {
            // Remove loading state and restore original icon
            icon.className = 'bx bx-heart';
            
            // Show error notification
            showNotification('error', 'Failed to update wishlist. Please try again.');
            console.error('Fetch error:', error);
          });
        });
      });
    }

    // Helper function to show notifications
    function showNotification(type, message) {
      const notification = document.createElement('div');
      notification.className = 'notification ' + type;
      notification.innerHTML = `
        <span>${message}</span>
        <button class="close-btn">&times;</button>
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(function() {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
      }, 3000);
      
      notification.querySelector('.close-btn').addEventListener('click', function() {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      const sizeButtons = document.querySelectorAll('.size-btn');
      
      sizeButtons.forEach(button => {
        button.addEventListener('click', () => {
          // Remove selected class from all buttons in the same group
          const parentGroup = button.closest('.size-buttons');
          parentGroup.querySelectorAll('.size-btn').forEach(btn => {
            btn.classList.remove('selected');
          });
          
          // Add selected class to clicked button
          button.classList.add('selected');
        });
      });
    });

    function initAddToCartButtons() {
      const addToCartButtons = document.querySelectorAll(".add-to-cart");

      addToCartButtons.forEach((button) => {
        button.addEventListener("click", function (e) {
          e.preventDefault();

          // Find the parent product box
          const productBox = this.closest(".single-productsBox");

          // Get product details
          const productId = productBox
            .querySelector(".wishlist-btn")
            .getAttribute("data-product-id");

          // Get selected size
          const selectedSizeButton = productBox.querySelector(".size-btn.selected");

          if (!selectedSizeButton) {
            showNotification("error", "Please select a size");
            return;
          }

          const selectedSize = selectedSizeButton.textContent;

          // Show loading state
          this.innerHTML = '<i class="bx bx-loader bx-spin"></i> Adding...';
          this.disabled = true;

          // Send AJAX request to add to cart
          fetch("/addTocart", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              productId: productId,
              size: selectedSize,
              quantity: 1, // Default quantity is 1, adjust if needed
            }),
          })
            .then((response) => response.json())
            .then((data) => {
              // Restore button text
              this.innerHTML = "Add to Cart";
              this.disabled = false;

              if (data.success) {
                // Show success notification
                showNotification("success", "Product added to cart");

                // Update cart count in header
                const cartCount = document.querySelector(".cart-count");
                if (cartCount) {
                  cartCount.textContent = data.cartCount;
                }
              } else {
                // Handle different error scenarios
                if (data.outOfStock) {
                  showNotification(
                    "error",
                    data.message || `Size ${selectedSize} is out of stock`
                  );
                } else if (data.login_required) {
                  // Redirect to login if needed
                  window.location.href =
                    "/login?redirect=" + encodeURIComponent(window.location.href);
                } else {
                  // Generic error message
                  showNotification(
                    "error",
                    data.message || "Failed to add to cart"
                  );
                }
              }
            })
            .catch((error) => {
              // Restore button text
              this.innerHTML = "Add to Cart";
              this.disabled = false;

              // Show error notification
              showNotification(
                "error",
                "Failed to add to cart. Please try again."
              );
              console.error("Fetch error:", error);
            });
        });
      });
    }
  </script>
</body>
<%- include('../partials/user/footer') %>