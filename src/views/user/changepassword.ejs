<%- include('../partials/user/header') %>

<body>
  <style>
    :root {
      --primary-color: #f53f85;
      --secondary-color: #f8f9fa;
      --accent-color: #4a6fdc;
      --text-color: #333;
      --border-color: #ddd;
      --success-color: #28a745;
      --error-color: #dc3545;
    }

    .logout-button {
      background-color: #f53f85;
      color: white;
      border: none;
      border-radius: 50px;
      padding: 10px 20px;
      text-align: center;
      font-size: 14px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .logout-button i {
      margin-right: 8px;
      font-size: 16px;
    }

    .logout-button:hover {
      background-color: #f53f85;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      transform: translateY(-2px);
    }

    .logout-button:active {
      transform: translateY(0);
      box-shadow: 0 2px 3px rgba(0, 0, 0, 0.2);
    }

    /* Dashboard Layout */
    .dashboard-container {
      display: flex;
      max-width: 1200px;
      margin: 20px auto;
      gap: 20px;
    }

    .account-tabs-menu {
      flex: 0 0 250px;
      background-color: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      height: fit-content;
    }

    .account-tabs-menu ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .account-tabs-menu li {
      margin-bottom: 10px;
    }

    .account-tabs-menu a {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      border-radius: 8px;
      color: var(--text-color);
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .account-tabs-menu a i {
      margin-right: 10px;
      font-size: 18px;
    }

    .account-tabs-menu a.active {
      background-color: var(--primary-color);
      color: white;
    }

    .account-tabs-menu a:hover:not(.active) {
      background-color: var(--secondary-color);
    }

    .dashboard-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    /* Password Section */
    .password-section {
      background-color: white;
      border-radius: 10px;
      padding: 25px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 1px solid var(--border-color);
    }

    .section-header h2 {
      margin: 0;
      font-size: 24px;
    }

    /* Password Form */
    .password-form {
      max-width: 500px;
      margin: 0 auto;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: var(--text-color);
    }

    .password-input-container {
      position: relative;
    }

    .form-control {
      width: 100%;
      padding: 12px 40px 12px 15px;
      border: 1px solid var(--border-color);
      border-radius: 5px;
      font-size: 14px;
      transition: all 0.3s ease;
    }

    .form-control:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px rgba(245, 63, 133, 0.2);
      outline: none;
    }

    .password-toggle {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      cursor: pointer;
      color: #666;
      font-size: 18px;
    }

    .password-strength {
      height: 5px;
      margin-top: 8px;
      border-radius: 3px;
      background-color: #eee;
      overflow: hidden;
    }

    .password-strength-meter {
      height: 100%;
      width: 0;
      border-radius: 3px;
      transition: all 0.3s ease;
    }

    .password-feedback {
      font-size: 12px;
      margin-top: 5px;
    }

    .password-requirements {
      margin-top: 10px;
      font-size: 12px;
      color: #666;
    }

    .requirement {
      display: flex;
      align-items: center;
      gap: 5px;
      margin-bottom: 3px;
    }

    .requirement i {
      font-size: 14px;
    }

    .valid {
      color: var(--success-color);
    }

    .invalid {
      color: #999;
    }

    .form-actions {
      display: flex;
      justify-content: center;
      margin-top: 30px;
    }

    .btn-submit {
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 50px;
      padding: 12px 30px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .btn-submit i {
      margin-right: 8px;
    }

    .btn-submit:hover {
      background-color: #e52f75;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .btn-submit:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    .error-message {
      color: var(--error-color);
      font-size: 13px;
      margin-top: 5px;
      display: none;
    }

    @media (max-width: 768px) {
      .dashboard-container {
        flex-direction: column;
      }

      .account-tabs-menu {
        flex: auto;
      }
    }
  </style>

  <div class="dashboard-container">
    <!-- Account Menu -->
    <div class="account-tabs-menu">
      <ul>
        <li>
          <a href="/profile"><i class="bx bxs-dashboard"></i> Dashboard</a>
        </li>
        <li>
          <a href="/orders"><i class="bx bxs-shopping-bag"></i> Orders</a>
        </li>
        <li>
          <a href="/address"><i class="bx bxs-map"></i> Addresses</a>
        </li>
        <li>
            <a href="/wallet"><i class="bx bxs-wallet"></i>wallet</a>
          </li>
        <li>
            <a href="/changenewpassword" class="active"><i class="bx bx-lock-alt"></i>Change Password</a>
        </li>
      </ul>
      <br /><br /><br />
      <button onclick="logout()" class="logout-button">
        <i class="bx bx-log-out"></i> Logout
      </button>
    </div>

    <!-- Dashboard Content -->
    <div class="dashboard-content">
      <!-- Password Section -->
      <div class="password-section">
        <div class="section-header">
          <h2>Change Password</h2>
        </div>

        <form action="/changenewpassword" id="changePasswordForm" class="password-form" method="post">
          <!-- Current Password -->
          <div class="form-group">
            <label for="currentPassword">Current Password</label>
            <div class="password-input-container">
              <input type="password" id="currentPassword" name="currentPassword" class="form-control" >
              <button type="button" class="password-toggle" onclick="togglePasswordVisibility('currentPassword')">
                <i class="bx bx-hide"></i>
              </button>
            </div>
            <div id="currentPasswordError" class="error-message">Please enter your current password</div>
          </div>

          <!-- New Password -->
          <div class="form-group">
            <label for="newPassword">New Password</label>
            <div class="password-input-container">
              <input type="password" id="newPassword" name="newPassword" class="form-control" >
              <button type="button" class="password-toggle" onclick="togglePasswordVisibility('newPassword')">
                <i class="bx bx-hide"></i>
              </button>
            </div>
            <div class="password-strength">
              <div id="passwordStrengthMeter" class="password-strength-meter"></div>
            </div>
            <div id="passwordFeedback" class="password-feedback"></div>
            <div class="password-requirements">
              <div class="requirement" id="req-length">
                <i class="bx bx-check-circle"></i> At least 8 characters
              </div>
              <div class="requirement" id="req-uppercase">
                <i class="bx bx-check-circle"></i> At least one uppercase letter
              </div>
              <div class="requirement" id="req-lowercase">
                <i class="bx bx-check-circle"></i> At least one lowercase letter
              </div>
              <div class="requirement" id="req-number">
                <i class="bx bx-check-circle"></i> At least one number
              </div>
              <div class="requirement" id="req-special">
                <i class="bx bx-check-circle"></i> At least one special character
              </div>
            </div>
            <div id="newPasswordError" class="error-message">Please enter a valid password</div>
          </div>

          <!-- Confirm Password -->
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <div class="password-input-container">
              <input type="password" id="confirmPassword" name="confirmPassword" class="form-control">
              <button type="button" class="password-toggle" onclick="togglePasswordVisibility('confirmPassword')">
                <i class="bx bx-hide"></i>
              </button>
            </div>
            <div id="confirmPasswordError" class="error-message">Passwords do not match</div>
          </div>

          <!-- Submit Button -->
          <div class="form-actions">
            <button type="submit" class="btn-submit" id="submitButton">
              <i class="bx bx-lock-alt"></i> Update Password
            </button>
          </div>
        </form>
      </div>
    </div>
  </div><br><br><br><br><br><br><br><br><br>

  <script>
    // Toggle password visibility
    function togglePasswordVisibility(inputId) {
      const input = document.getElementById(inputId);
      const icon = input.nextElementSibling.querySelector('i');
      
      if (input.type === 'password') {
        input.type = 'text';
        icon.className = 'bx bx-show';
      } else {
        input.type = 'password';
        icon.className = 'bx bx-hide';
      }
    }

    // Check password strength and update requirements
    function checkPasswordStrength(password) {
      // Requirements check
      const requirements = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /[0-9]/.test(password),
        special: /[^A-Za-z0-9]/.test(password)
      };
      
      // Update requirement visuals
      for (const [req, valid] of Object.entries(requirements)) {
        const element = document.getElementById(`req-${req}`);
        const icon = element.querySelector('i');
        
        if (valid) {
          element.classList.add('valid');
          element.classList.remove('invalid');
          icon.className = 'bx bx-check-circle';
        } else {
          element.classList.add('invalid');
          element.classList.remove('valid');
          icon.className = 'bx bx-x-circle';
        }
      }
      
      // Calculate strength score (0-4)
      const score = Object.values(requirements).filter(Boolean).length;
      
      // Update strength meter
      const strengthMeter = document.getElementById('passwordStrengthMeter');
      const feedback = document.getElementById('passwordFeedback');
      
      // Set width and color based on score
      strengthMeter.style.width = `${(score / 5) * 100}%`;
      
      let color, message;
      
      switch(score) {
        case 0:
        case 1:
          color = '#dc3545'; // Red
          message = 'Very weak';
          break;
        case 2:
          color = '#ffc107'; // Yellow
          message = 'Weak';
          break;
        case 3:
          color = '#fd7e14'; // Orange
          message = 'Medium';
          break;
        case 4:
          color = '#20c997'; // Teal
          message = 'Strong';
          break;
        case 5:
          color = '#28a745'; // Green
          message = 'Very strong';
          break;
      }
      
      strengthMeter.style.backgroundColor = color;
      feedback.textContent = message;
      feedback.style.color = color;
      
      return score >= 3; // Return true if password is at least medium strength
    }

    // Validate confirm password
    function validateConfirmPassword() {
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const errorElement = document.getElementById('confirmPasswordError');
      
      if (confirmPassword && newPassword !== confirmPassword) {
        errorElement.style.display = 'block';
        return false;
      } else {
        errorElement.style.display = 'none';
        return true;
      }
    }

    // Check if form is valid
    function checkFormValidity() {
      const currentPassword = document.getElementById('currentPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      const currentPasswordError = document.getElementById('currentPasswordError');
      const newPasswordError = document.getElementById('newPasswordError');
      
      let isValid = true;
      
      // Check current password
      if (!currentPassword) {
        currentPasswordError.style.display = 'block';
        isValid = false;
      } else {
        currentPasswordError.style.display = 'none';
      }
      
      // Check new password
      const isPasswordStrong = checkPasswordStrength(newPassword);
      if (!newPassword || !isPasswordStrong) {
        newPasswordError.style.display = 'block';
        isValid = false;
      } else {
        newPasswordError.style.display = 'none';
      }
      
      // Check confirm password
      const isConfirmValid = validateConfirmPassword();
      if (!isConfirmValid) {
        isValid = false;
      }
      
      return isValid;
    }

    // Initialize event listeners
    document.addEventListener('DOMContentLoaded', function() {
      // Password strength checker
      document.getElementById('newPassword').addEventListener('input', function() {
        checkPasswordStrength(this.value);
      });
      
      // Confirm password validator
      document.getElementById('confirmPassword').addEventListener('input', validateConfirmPassword);
      
      // // Form submission
      // document.getElementById('changePasswordForm').addEventListener('submit', function(e) {
      //   e.preventDefault();
        
      //   if (checkFormValidity()) {
      //     // In a real application, this would submit to the server
      //     // For demo purposes, show success message
      //     Swal.fire({
      //       icon: 'success',
      //       title: 'Password Updated',
      //       text: 'Your password has been changed successfully',
      //       confirmButtonColor: '#f53f85',
      //     });
          
      //     // Reset form
      //     this.reset();
      //     document.getElementById('passwordStrengthMeter').style.width = '0';
      //     document.getElementById('passwordFeedback').textContent = '';
          
      //     // Reset requirement indicators
      //     const requirements = document.querySelectorAll('.requirement');
      //     requirements.forEach(req => {
      //       req.classList.remove('valid');
      //       req.classList.add('invalid');
      //       req.querySelector('i').className = 'bx bx-x-circle';
      //     });
      //   }
      // });
    });

    // Logout confirmation
    function logout() {
      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to continue to logout?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#000000',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Logout',
        cancelButtonText: 'Cancel',
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = '/logout';
        }
      });
    }
  </script>
</body>
<%- include('../partials/user/footer') %>