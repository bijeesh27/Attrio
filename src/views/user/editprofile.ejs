<%- include('../partials/user/header') %>

<body>
  <link rel="stylesheet" href="/user/assets/css/profilestyle.css" />
  <!-- Add Cropper.js CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />

  <div class="dashboard-container">
    <!-- Account Menu -->
    <div class="account-tabs-menu">
      <ul>
        <li>
          <a href="/profile" class="active"
            ><i class="bx bxs-dashboard"></i> Dashboard</a
          >
        </li>
        <li>
          <a href="/orders"><i class="bx bxs-shopping-bag"></i> Orders</a>
        </li>
        <li>
          <a href="/address"><i class="bx bxs-map"></i> Addresses</a>
        </li>
        <li>
            <a href="/wallet"><i class="bx bxs-wallet"></i>wallet</a>
          </li>
        <li>
          <a href="/changenewpassword"
            ><i class="bx bx-lock-alt"></i>Change Password</a
          >
        </li>
      </ul>
      <br /><br /><br />
      <button onclick="logout()" class="logout-button">
        <i class="bx bx-log-out"></i> Logout
      </button>
    </div>

    <!-- Dashboard Content -->
    <div class="dashboard-content">
      <div class="dashboard-cards">
        <div class="dashboard-card">
          <div class="card-header">
            <h3>Edit Profile</h3>
            <a href="/profile" class="back-link">
              <i class="bx bx-arrow-back"></i> Back to Dashboard
            </a>
          </div>
          
          <!-- Edit Profile Form -->
          <form id="editProfileForm" class="edit-profile-form" action="/updateprofile" method="POST">
            <!-- Profile Image Section -->
            <div class="profile-image-edit-section">
              <div class="profile-image-container">
                <img
                  src="<%= user.profileImage || '/user/assets/img/defaultprofile.jpg' %>"
                  alt="Profile Image"
                  class="profile-image"
                  id="profileImg"
                />
                <div class="profile-image-edit" onclick="openProfileImageModal()">
                  <i class="bx bx-camera"></i>
                </div>
              </div>
              <div class="profile-image-hint">Click the camera icon to change your profile picture</div>
            </div>
            
            <div class="form-section">
              <h4>Personal Information</h4>
              <div class="form-group">
                <label for="username">Full Name</label>
                <input type="text" id="username" name="username" value="<%= user.username %>" required>
              </div>
              <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" value="<%= user.email %>" required>
              </div>
              <div class="form-group">
                <label for="number">Phone</label>
                <input type="tel" id="number" name="number" value="<%= user.number || '' %>" placeholder="Enter phone number">
              </div>
              <div class="form-group">
                <label for="dob">Date of Birth</label>
                <input type="date" id="dob" name="dob" value="<%= user.dob || '' %>">
              </div>
            </div>
            
            
            <div class="form-buttons">
              <a href="/profile" class="cancel-btn">Cancel</a>
              <button type="submit" class="save-btn">Save Changes</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Profile Image Modal -->
  <div id="profileImageModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Upload Profile Picture</h3>
        <span class="close" onclick="closeProfileImageModal()">&times;</span>
      </div>
      <div class="modal-body">
        <div class="upload-container">
          <div class="upload-area" id="uploadArea">
            <input type="file" id="profileImageInput" accept="image/*" style="display: none;">
            <div class="upload-prompt" id="uploadPrompt">
              <i class="bx bx-cloud-upload"></i>
              <p>Drag & drop an image or <span class="browse-link" onclick="document.getElementById('profileImageInput').click()">browse</span></p>
              <p class="upload-hint">Supported formats: JPG, PNG, GIF (Max 5MB)</p>
            </div>
            <div class="cropper-container" id="cropperContainer" style="display: none;">
              <img src="" id="cropperImage" alt="Image to crop">
            </div>
          </div>
          <div class="upload-actions" id="uploadActions" style="display: none;">
            <button type="button" class="cancel-btn" onclick="resetUpload()">Cancel</button>
            <button type="button" class="crop-btn" id="cropBtn">Crop & Save</button>
          </div>
        </div>
      </div>
    </div>
  </div><br><br><br><br><br><br><br><br><br>

  <!-- Add Cropper.js Script -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  
  <script>
    // Logout confirmation
    function logout() {
      Swal.fire({
        title: `Are you sure?`,
        text: ` Do you want to continue to logout?`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#000000",
        cancelButtonColor: "#d33",
        confirmButtonText: "Logout",
        cancelButtonText: "Cancel",
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = "/logout";
        }
      });
    }

    // Profile image modal functionality
    let profileImageModal = document.getElementById('profileImageModal');
    let cropper;

    function openProfileImageModal() {
      profileImageModal.style.display = 'block';
    }

    function closeProfileImageModal() {
      profileImageModal.style.display = 'none';
      resetUpload();
    }

    // Close modal if clicked outside
    window.onclick = function(event) {
      if (event.target == profileImageModal) {
        closeProfileImageModal();
      }
    }

    // Handle file upload
    const profileImageInput = document.getElementById('profileImageInput');
    const uploadPrompt = document.getElementById('uploadPrompt');
    const uploadActions = document.getElementById('uploadActions');
    const cropperContainer = document.getElementById('cropperContainer');
    const cropperImage = document.getElementById('cropperImage');

    profileImageInput.addEventListener('change', function(e) {
      if (e.target.files.length > 0) {
        const file = e.target.files[0];
        
        // Check file size (5MB max)
        if (file.size > 5 * 1024 * 1024) {
          Swal.fire({
            title: 'Error',
            text: 'File size exceeds 5MB limit',
            icon: 'error',
            confirmButtonColor: '#000000'
          });
          return;
        }
        
        const reader = new FileReader();
        
        reader.onload = function(e) {
          // Show cropper
          uploadPrompt.style.display = 'none';
          cropperContainer.style.display = 'block';
          uploadActions.style.display = 'flex';
          
          cropperImage.src = e.target.result;
          
          // Initialize cropper
          if (cropper) {
            cropper.destroy();
          }
          
          cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
            dragMode: 'move',
            autoCropArea: 0.8,
            responsive: true,
            guides: true,
            highlight: false,
            cropBoxMovable: true,
            cropBoxResizable: true,
            background: false
          });
        }
        
        reader.readAsDataURL(file);
      }
    });

    // Handle drag and drop
    const uploadArea = document.getElementById('uploadArea');
    
    uploadArea.addEventListener('dragover', function(e) {
      e.preventDefault();
      uploadArea.classList.add('dragover');
    });
    
    uploadArea.addEventListener('dragleave', function() {
      uploadArea.classList.remove('dragover');
    });
    
    uploadArea.addEventListener('drop', function(e) {
      e.preventDefault();
      uploadArea.classList.remove('dragover');
      
      if (e.dataTransfer.files.length > 0) {
        profileImageInput.files = e.dataTransfer.files;
        const event = new Event('change', { bubbles: true });
        profileImageInput.dispatchEvent(event);
      }
    });

  // Handle crop and save
document.getElementById('cropBtn').addEventListener('click', function() {
  if (!cropper) return;
  
  const canvas = cropper.getCroppedCanvas({
    width: 300,
    height: 300
  });
  
  if (canvas) {
    canvas.toBlob(function(blob) {
      const formData = new FormData();
      formData.append('profileImage', blob, 'profile-image.png');
      
      // Show loading indicator
      Swal.fire({
        title: 'Uploading...',
        text: 'Please wait while we update your profile image',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Send to server
      fetch('/update-profile-image', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        Swal.close();
        
        if (data.success) {
          // Update image on page with cache-busting parameter
          document.getElementById('profileImg').src = data.imageUrl + '?t=' + new Date().getTime();
          closeProfileImageModal();
          
          Swal.fire({
            title: 'Success!',
            text: 'Profile image updated successfully',
            icon: 'success',
            confirmButtonColor: '#000000'
          });
        } else {
          Swal.fire({
            title: 'Error',
            text: data.message || 'Failed to update profile image',
            icon: 'error',
            confirmButtonColor: '#000000'
          });
        }
      })
      .catch(error => {
        Swal.close();
        console.error('Error:', error);
        Swal.fire({
          title: 'Error',
          text: 'An error occurred while updating your profile image',
          icon: 'error',
          confirmButtonColor: '#000000'
        });
      });
    }, 'image/png');
  }
});

// Profile form submission - Add client-side validation
const editProfileForm = document.getElementById('editProfileForm');

if (editProfileForm) {
  editProfileForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Basic validation
    const email = document.getElementById('email').value;
    const username = document.getElementById('username').value;
    
    if (!email || !username) {
      Swal.fire({
        title: 'Validation Error',
        text: 'Please provide all required fields',
        icon: 'error',
        confirmButtonColor: '#000000'
      });
      return;
    }
    
    // Email format validation
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailPattern.test(email)) {
      Swal.fire({
        title: 'Validation Error',
        text: 'Please provide a valid email address',
        icon: 'error',
        confirmButtonColor: '#000000'
      });
      return;
    }
    
    // Submit form if validation passes
    this.submit();
  });
}

// Add error checking for file size on upload
profileImageInput.addEventListener('change', function(e) {
  if (e.target.files.length > 0) {
    const file = e.target.files[0];
    
    // Check file size (5MB max)
    if (file.size > 5 * 1024 * 1024) {
      Swal.fire({
        title: 'Error',
        text: 'File size exceeds 5MB limit',
        icon: 'error',
        confirmButtonColor: '#000000'
      });
      resetUpload();
      return;
    }
    
    // Check file type
    const fileType = file.type;
    if (!fileType.match(/^image\/(jpeg|jpg|png|gif)$/)) {
      Swal.fire({
        title: 'Error',
        text: 'Only JPG, PNG and GIF files are allowed',
        icon: 'error',
        confirmButtonColor: '#000000'
      });
      resetUpload();
      return;
    }
    
    const reader = new FileReader();
    
    reader.onload = function(e) {
      // Show cropper
      uploadPrompt.style.display = 'none';
      cropperContainer.style.display = 'block';
      uploadActions.style.display = 'flex';
      
      cropperImage.src = e.target.result;
      
      // Initialize cropper
      if (cropper) {
        cropper.destroy();
      }
      
      cropper = new Cropper(cropperImage, {
        aspectRatio: 1,
        viewMode: 1,
        dragMode: 'move',
        autoCropArea: 0.8,
        responsive: true,
        guides: true,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        background: false
      });
    }
    
    reader.readAsDataURL(file);
  }
});

    function resetUpload() {
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      profileImageInput.value = '';
      uploadPrompt.style.display = 'block';
      cropperContainer.style.display = 'none';
      uploadActions.style.display = 'none';
    }
  </script>

  <style>
    /* Edit Profile Page Styles */
    .back-link {
      display: flex;
      align-items: center;
      color: #555;
      font-size: 14px;
      transition: color 0.2s;
    }
    
    .back-link:hover {
      color: #000;
    }
    
    .back-link i {
      margin-right: 5px;
    }
    
    .edit-profile-form {
      padding: 20px 0;
    }
    
    .profile-image-edit-section {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 30px;
    }
    
    .profile-image-container {
      position: relative;
      width: 120px;
      height: 120px;
      margin-bottom: 10px;
    }
    
    .profile-image {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid #f1f1f1;
    }
    
    .profile-image-edit {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 32px;
      height: 32px;
      background: #000;
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 18px;
      border: 2px solid white;
    }
    
    .profile-image-hint {
      color: #777;
      font-size: 13px;
      margin-top: 5px;
    }
    
    .form-section {
      margin-bottom: 30px;
      border-bottom: 1px solid #f1f1f1;
      padding-bottom: 20px;
    }
    
    .form-section:last-of-type {
      border-bottom: none;
    }
    
    .form-section h4 {
      margin-top: 0;
      margin-bottom: 15px;
      font-size: 16px;
      color: #333;
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
      font-size: 14px;
    }
    
    .form-group input,
    .form-group textarea {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
      transition: border-color 0.2s;
    }
    
    .form-group input:focus,
    .form-group textarea:focus {
      border-color: #000;
      outline: none;
    }
    
    .form-row {
      display: flex;
      gap: 15px;
    }
    
    .form-row .form-group {
      flex: 1;
    }
    
    .form-buttons {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 20px;
    }
    
    .cancel-btn {
      padding: 10px 20px;
      background-color: #f1f1f1;
      color: #333;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
      transition: background-color 0.2s;
    }
    
    .cancel-btn:hover {
      background-color: #e5e5e5;
    }
    
    .save-btn {
      padding: 10px 20px;
      background-color: #000;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.2s;
    }
    
    .save-btn:hover {
      background-color: #333;
    }
    
    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.5);
    }
    
    .modal-content {
      background-color: #fff;
      margin: 5% auto;
      width: 500px;
      max-width: 90%;
      border-radius: 8px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }
    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 20px;
      border-bottom: 1px solid #f1f1f1;
    }
    
    .modal-header h3 {
      margin: 0;
      font-size: 18px;
    }
    
    .close {
      font-size: 24px;
      font-weight: bold;
      cursor: pointer;
    }
    
    .modal-body {
      padding: 20px;
    }
    
    /* Upload Area Styles */
    .upload-container {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    
    .upload-area {
      border: 2px dashed #ddd;
      border-radius: 6px;
      padding: 20px;
      text-align: center;
      min-height: 200px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      transition: all 0.2s ease;
      position: relative;
    }
    
    .upload-area.dragover {
      border-color: #000;
      background-color: rgba(0, 0, 0, 0.02);
    }
    
    .upload-prompt i {
      font-size: 48px;
      color: #aaa;
      margin-bottom: 10px;
    }
    
    .browse-link {
      color: #000;
      text-decoration: underline;
      cursor: pointer;
    }
    
    .upload-hint {
      color: #888;
      font-size: 12px;
      margin-top: 5px;
    }
    
    .cropper-container {
      width: 100%;
      height: 300px;
    }
    
    .upload-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }
    
    .crop-btn {
      padding: 8px 16px;
      background-color: #000;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .form-row {
        flex-direction: column;
        gap: 0;
      }
      
      .dashboard-content {
        padding: 15px;
      }
    }
  </style>
</body>
<%- include('../partials/user/footer') %>