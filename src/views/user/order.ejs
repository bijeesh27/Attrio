<%- include('../partials/user/header') %>

<body>
  <style>
    :root {
      --primary-color: #f53f85;
      --secondary-color: #f8f9fa;
      --accent-color: #4a6fdc;
      --text-color: #333;
      --border-color: #ddd;
      --success-color: #28a745;
    }

    .logout-button {
      background-color: #f53f85;
      color: white;
      border: none;
      border-radius: 50px;
      padding: 10px 20px;
      text-align: center;
      font-size: 14px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .logout-button i {
      margin-right: 8px;
      font-size: 16px;
    }

    .logout-button:hover {
      background-color: #f53f85;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      transform: translateY(-2px);
    }

    .logout-button:active {
      transform: translateY(0);
      box-shadow: 0 2px 3px rgba(0, 0, 0, 0.2);
    }

    /* Dashboard Layout */
    .dashboard-container {
      display: flex;
      max-width: 1200px;
      margin: 20px auto;
      gap: 20px;
    }

    .account-tabs-menu {
      flex: 0 0 250px;
      background-color: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      height: fit-content;
    }

    .account-tabs-menu ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .account-tabs-menu li {
      margin-bottom: 10px;
    }

    .account-tabs-menu a {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      border-radius: 8px;
      color: var(--text-color);
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .account-tabs-menu a i {
      margin-right: 10px;
      font-size: 18px;
    }

    .account-tabs-menu a.active {
      background-color: var(--primary-color);
      color: white;
    }

    .account-tabs-menu a:hover:not(.active) {
      background-color: var(--secondary-color);
    }

    .dashboard-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    /* Orders Page Specific Styles */
    .orders-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .orders-header h2 {
      margin: 0;
      font-size: 24px;
    }

    .orders-filter {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .filter-select {
      padding: 8px 12px;
      border-radius: 5px;
      border: 1px solid var(--border-color);
      background-color: white;
      font-size: 14px;
    }

    .orders-table {
      width: 100%;
      border-collapse: collapse;
    }

    .orders-table th {
      background-color: var(--secondary-color);
      padding: 12px 15px;
      text-align: left;
      font-weight: 600;
      border-bottom: 2px solid var(--border-color);
    }

    .orders-table td {
      padding: 12px 15px;
      border-bottom: 1px solid var(--border-color);
    }

    .order-status {
      display: inline-block;
      padding: 4px 10px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
    }

    .status-delivered {
      background-color: #d1fae5;
      color: #065f46;
    }

    .status-processing {
      background-color: #fef3c7;
      color: #92400e;
    }

    .status-shipped {
      background-color: #dbeafe;
      color: #1e40af;
    }

    .status-cancelled {
      background-color: #fee2e2;
      color: #b91c1c;
    }

    .order-action {
      color: var(--accent-color);
      text-decoration: none;
      font-weight: 500;
    }

    /* Order Details Styles */
    .order-details-card {
      background-color: white;
      border-radius: 10px;
      padding: 25px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
    }

    .order-details-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid var(--border-color);
    }

    .order-details-header h3 {
      margin: 0;
      font-size: 20px;
    }

    .order-number {
      font-weight: normal;
      color: #666;
    }

    .order-meta {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
    }

    .order-meta-item {
      flex: 1;
    }

    .order-meta-label {
      font-size: 14px;
      color: #666;
      margin-bottom: 5px;
    }

    .order-meta-value {
      font-size: 16px;
      font-weight: 500;
    }

    .order-items {
      margin-bottom: 20px;
    }

    .order-item {
      display: flex;
      padding: 15px 0;
      border-bottom: 1px solid var(--border-color);
    }

    .order-item:last-child {
      border-bottom: none;
    }

    .order-item-image {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 5px;
      margin-right: 15px;
    }

    .order-item-details {
      flex: 1;
    }

    .order-item-name {
      font-weight: 500;
      margin: 0 0 5px 0;
    }

    .order-item-meta {
      font-size: 14px;
      color: #666;
      margin-bottom: 5px;
    }

    .order-item-price {
      text-align: right;
      font-weight: 500;
    }

    .order-summary {
      background-color: var(--secondary-color);
      padding: 15px;
      border-radius: 5px;
    }

    .order-summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
    }

    .order-summary-row:last-child {
      margin-bottom: 0;
      padding-top: 10px;
      border-top: 1px solid #ddd;
      font-weight: 600;
    }

    .order-addresses {
      display: flex;
      gap: 20px;
      margin-top: 20px;
    }

    .address-card {
      flex: 1;
      background-color: var(--secondary-color);
      padding: 15px;
      border-radius: 5px;
    }

    .address-card h4 {
      margin-top: 0;
      margin-bottom: 10px;
      font-size: 16px;
    }

    .address-line {
      margin-bottom: 5px;
    }

    .back-to-orders {
      display: inline-flex;
      align-items: center;
      color: var(--accent-color);
      text-decoration: none;
      font-weight: 500;
      margin-bottom: 20px;
    }

    .back-to-orders i {
      margin-right: 5px;
    }

    /* Order Timeline */
    .order-timeline {
      margin: 30px 0;
      position: relative;
    }

    .timeline-track {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 15px;
      width: 2px;
      background-color: #ddd;
    }

    .timeline-item {
      display: flex;
      margin-bottom: 25px;
      position: relative;
    }

    .timeline-dot {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      background-color: white;
      border: 2px solid var(--primary-color);
      display: flex;
      justify-content: center;
      align-items: center;
      margin-right: 15px;
      z-index: 1;
    }

    .timeline-dot i {
      color: var(--primary-color);
    }

    .timeline-dot.completed {
      background-color: var(--primary-color);
    }

    .timeline-dot.completed i {
      color: white;
    }

    .timeline-content {
      flex: 1;
    }

    .timeline-date {
      font-size: 14px;
      color: #666;
      margin-bottom: 3px;
    }

    .timeline-title {
      font-weight: 500;
      margin: 0 0 5px 0;
    }

    .timeline-description {
      font-size: 14px;
      color: #666;
    }

    /* Modal Styles for Order Actions */
    .modal-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }

    .modal-container {
      background-color: white;
      border-radius: 10px;
      width: 100%;
      max-width: 500px;
      padding: 25px;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 1px solid var(--border-color);
    }

    .modal-header h3 {
      margin: 0;
      font-size: 20px;
    }

    .modal-close {
      cursor: pointer;
      font-size: 20px;
      color: #666;
    }

    .modal-body {
      margin-bottom: 20px;
    }

    .modal-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }

    .btn {
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .btn-primary {
      background-color: var(--primary-color);
      color: white;
      border: none;
    }

    .btn-primary:hover {
      background-color: #e52f75;
    }

    .btn-secondary {
      background-color: #f1f1f1;
      color: #333;
      border: 1px solid #ddd;
    }

    .btn-secondary:hover {
      background-color: #e0e0e0;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .dashboard-container {
        flex-direction: column;
      }

      .account-tabs-menu {
        flex: auto;
      }

      .orders-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }

      .orders-table th:nth-child(3),
      .orders-table td:nth-child(3) {
        display: none;
      }

      .order-meta {
        flex-direction: column;
        gap: 10px;
      }

      .order-addresses {
        flex-direction: column;
      }

      .order-item {
        flex-direction: column;
      }

      .order-item-image {
        margin-bottom: 10px;
      }

      .order-item-price {
        text-align: left;
        margin-top: 10px;
      }
    }

    /* No Orders State */
    .no-orders {
      text-align: center;
      padding: 40px 20px;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .no-orders i {
      font-size: 60px;
      color: #ddd;
      margin-bottom: 15px;
      display: block;
    }

    .no-orders h3 {
      margin: 0 0 10px 0;
      font-size: 20px;
      color: #666;
    }

    .no-orders p {
      margin: 0 0 20px 0;
      color: #888;
    }

    .shop-now-btn {
      display: inline-flex;
      align-items: center;
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      font-weight: 500;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .shop-now-btn i {
      margin-right: 8px;
      font-size: 16px;
      color: white;
      margin-bottom: 0;
    }

    .shop-now-btn:hover {
      background-color: #e52f75;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
  </style>

  <div class="dashboard-container">
    <!-- Account Menu -->
    <div class="account-tabs-menu">
      <ul>
        <li>
          <a href="/profile"><i class="bx bxs-dashboard"></i> Dashboard</a>
        </li>
        <li>
          <a href="/orders" class="active"><i class="bx bxs-shopping-bag"></i> Orders</a>
        </li>
        <li>
          <a href="/address"><i class="bx bxs-map"></i> Addresses</a>
        </li>
        <li>
          <a href="/wallet"><i class="bx bxs-wallet"></i>wallet</a>
        </li>
        <li>
          <a href="/changenewpassword"
            ><i class="bx bx-lock-alt"></i>Change Password</a
          >
        </li>
      </ul>
      <br /><br /><br />
      <button onclick="logout()" class="logout-button">
        <i class="bx bx-log-out"></i> Logout
      </button>
    </div>

    <!-- Orders Content -->
    <!-- <div class="dashboard-content">
      <div class="orders-header">
        <h2>My Orders</h2>
        <div class="orders-filter">
          <label for="status-filter">Filter by:</label>
          <select id="status-filter" class="filter-select" onchange="filterOrders()">
            <option value="all">All Orders</option>
            <option value="processing">Processing</option>
            <option value="shipped">Shipped</option>
            <option value="delivered">Delivered</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
      </div> -->

      <!-- Show if there are orders -->
      <% if (user.orders && user.orders.length > 0) { %>
        <div class="order-details-section" id="ordersList">
          <table class="orders-table">
            <thead>
              <tr>
                <th>Order #</th>
                <th>Date</th>
                <th>Items</th>
                <th>Total</th>
                <th>Status</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <% user.orders.forEach(order => { %>
                <tr class="order-row" data-status="<%= order.status %>">
                  <td><strong><%= order.orderNumber %></strong></td>
                  <td><%= new Date(order.date).toLocaleDateString() %></td>
                  <td><%= order.items.length %> item(s)</td>
                  <td>$<%= order.total.toFixed(2) %></td>
                  <td>
                    <span class="order-status status-<%= order.status %>">
                      <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                    </span>
                  </td>
                  <td>
                    <a href="javascript:void(0)" class="order-action" onclick="showOrderDetails('<%= order.id %>')">View</a>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>

        <!-- Order Details Section (Initially Hidden) -->
        <div id="orderDetails" style="display: none;">
          <a href="javascript:void(0)" class="back-to-orders" onclick="hideOrderDetails()">
            <i class="bx bx-left-arrow-alt"></i> Back to Orders
          </a>

          <div class="order-details-card">
            <div class="order-details-header">
              <h3>Order Details <span class="order-number" id="detailOrderNumber"></span></h3>
              <span class="order-status" id="detailOrderStatus"></span>
            </div>

            <div class="order-meta">
              <div class="order-meta-item">
                <div class="order-meta-label">Order Date</div>
                <div class="order-meta-value" id="detailOrderDate"></div>
              </div>
              <div class="order-meta-item">
                <div class="order-meta-label">Payment Method</div>
                <div class="order-meta-value" id="detailPaymentMethod"></div>
              </div>
              <div class="order-meta-item">
                <div class="order-meta-label">Expected Delivery</div>
                <div class="order-meta-value" id="detailDeliveryDate"></div>
              </div>
            </div>

            <!-- Order Timeline -->
            <div class="order-timeline">
              <div class="timeline-track"></div>
              <div class="timeline-item">
                <div class="timeline-dot completed">
                  <i class="bx bx-check"></i>
                </div>
                <div class="timeline-content">
                  <div class="timeline-date" id="orderPlacedDate"></div>
                  <h4 class="timeline-title">Order Placed</h4>
                  <div class="timeline-description">Your order has been placed successfully</div>
                </div>
              </div>
              <div class="timeline-item">
                <div class="timeline-dot" id="processingDot">
                  <i class="bx bx-package"></i>
                </div>
                <div class="timeline-content">
                  <div class="timeline-date" id="processingDate"></div>
                  <h4 class="timeline-title">Processing</h4>
                  <div class="timeline-description">Your order is being processed</div>
                </div>
              </div>
              <div class="timeline-item">
                <div class="timeline-dot" id="shippedDot">
                  <i class="bx bx-car"></i>
                </div>
                <div class="timeline-content">
                  <div class="timeline-date" id="shippedDate"></div>
                  <h4 class="timeline-title">Shipped</h4>
                  <div class="timeline-description">Your order has been shipped</div>
                </div>
              </div>
              <div class="timeline-item">
                <div class="timeline-dot" id="deliveredDot">
                  <i class="bx bx-check-circle"></i>
                </div>
                <div class="timeline-content">
                  <div class="timeline-date" id="deliveredDate"></div>
                  <h4 class="timeline-title">Delivered</h4>
                  <div class="timeline-description">Package delivered successfully</div>
                </div>
              </div>
            </div>

            <div class="order-items">
              <h4>Items in your order</h4>
              <div id="orderItemsList">
                <!-- Order items will be populated here -->
              </div>
            </div>

            <div class="order-summary">
              <div class="order-summary-row">
                <div>Subtotal</div>
                <div id="detailSubtotal"></div>
              </div>
              <div class="order-summary-row">
                <div>Shipping</div>
                <div id="detailShipping"></div>
              </div>
              <div class="order-summary-row">
                <div>Tax</div>
                <div id="detailTax"></div>
              </div>
              <div class="order-summary-row">
                <div>Total</div>
                <div id="detailTotal"></div>
              </div>
            </div>

            <div class="order-addresses">
              <div class="address-card">
                <h4>Shipping Address</h4>
                <div id="shippingAddress">
                  <!-- Shipping address will be populated here -->
                </div>
              </div>
              <div class="address-card">
                <h4>Billing Address</h4>
                <div id="billingAddress">
                  <!-- Billing address will be populated here -->
                </div>
              </div>
            </div>
          </div>

          <div class="order-actions" id="orderActions">
            <!-- Only show for specific status -->
            <button class="btn btn-secondary" onclick="trackOrder()">Track Package</button>
            <button class="btn btn-secondary" onclick="openReturnModal()">Return Item</button>
            <button class="btn btn-secondary" onclick="openCancelModal()" id="cancelOrderBtn">Cancel Order</button>
          </div>
        </div>
      <% } else { %>
        <!-- No Orders State -->
        <div class="no-orders">
          <i class="bx bx-shopping-bag"></i>
          <h3>No Orders Yet</h3>
          <p>Looks like you haven't placed any orders yet.</p>
          <a href="/shop" class="shop-now-btn">
            <i class="bx bx-store"></i> Start Shopping
          </a>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Cancel Order Modal -->
  <div class="modal-backdrop" id="cancelOrderModal">
    <div class="modal-container">
      <div class="modal-header">
        <h3>Cancel Order</h3>
        <div class="modal-close" onclick="closeModal('cancelOrderModal')">
          <i class="bx bx-x"></i>
        </div>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to cancel this order? This action cannot be undone.</p>
        <div class="form-group">
          <label for="cancelReason">Reason for cancellation</label>
          <select id="cancelReason" class="form-control">
            <option value="">Select a reason</option>
            <option value="changed_mind">Changed my mind</option>
            <option value="found_better_price">Found a better price elsewhere</option>
            <option value="ordered_wrong_item">Ordered the wrong item</option>
            <option value="shipping_too_long">Shipping takes too long</option>
            <option value="other">Other reason</option>
          </select>
        </div>
      </div>
      <div class="modal-actions">
        <button class="btn btn-secondary" onclick="closeModal('cancelOrderModal')">No, Keep Order</button>
        <button class="btn btn-primary" onclick="confirmCancelOrder()">Yes, Cancel Order</button>
      </div>
    </div>
  </div>

  <!-- Return Order Modal -->
  <div class="modal-backdrop" id="returnOrderModal">
    <div class="modal-container">
      <div class="modal-header">
        <h3>Return Item</h3>
        <div class="modal-close" onclick="closeModal('returnOrderModal')">
          <i class="bx bx-x"></i>
        </div>
      </div>
      <div class="modal-body">
        <p>Which item(s) would you like to return?</p>
        <div id="returnItemsList">
          <!-- Return items will be populated here -->
        </div>
        <div class="form-group">
          <label for="returnReason">Reason for return</label>
          <select id="returnReason" class="form-control">
            <option value="">Select a reason</option>
            <option value="damaged">Item arrived damaged</option>
            <option value="defective">Item is defective</option>
            <option value="wrong_item">Received the wrong item</option>
            <option value="not_as_described">Item not as described</option>
            <option value="other">Other reason</option>
          </select>
        </div>
        <div class="form-group">
          <label for="returnComments">Additional Comments</label>
          <textarea id="returnComments" class="form-control" rows="3"></textarea>
        </div>
      </div>
      <div class="modal-actions">
        <button class="btn btn-secondary" onclick="closeModal('returnOrderModal')">Cancel</button>
        <button class="btn btn-primary" onclick="confirmReturn()">Submit Return Request</button>
      </div>
    </div>
  </div><br><br><br><br><br><br><br><br><br>

  <script>
   

let currentOrderId = null;

// Filter orders based on status
function filterOrders() {
  const status = document.getElementById('status-filter').value;
  const orderRows = document.querySelectorAll('.order-row');
  
  orderRows.forEach(row => {
    if (status === 'all' || row.dataset.status === status) {
      row.style.display = 'table-row';
    } else {
      row.style.display = 'none';
    }
  });
}

// Show order details
function showOrderDetails(orderId) {
  currentOrderId = orderId;
  const order = orders.find(order => order.id === orderId);
  
  if (!order) return;
  
  // Populate order details
  document.getElementById('detailOrderNumber').textContent = `#${order.orderNumber}`;
  document.getElementById('detailOrderDate').textContent = new Date(order.date).toLocaleDateString();
  document.getElementById('detailPaymentMethod').textContent = order.paymentMethod;
  document.getElementById('detailDeliveryDate').textContent = order.expectedDelivery ? new Date(order.expectedDelivery).toLocaleDateString() : 'Pending';
  
  // Set order status
  const statusElement = document.getElementById('detailOrderStatus');
  statusElement.textContent = order.status.charAt(0).toUpperCase() + order.status.slice(1);
  statusElement.className = `order-status status-${order.status}`;
  
  // Update timeline
  document.getElementById('orderPlacedDate').textContent = new Date(order.timeline.ordered).toLocaleString();
  
  // Processing status
  if (order.timeline.processing) {
    document.getElementById('processingDate').textContent = new Date(order.timeline.processing).toLocaleString();
    document.getElementById('processingDot').classList.add('completed');
  } else {
    document.getElementById('processingDate').textContent = 'Pending';
    document.getElementById('processingDot').classList.remove('completed');
  }
  
  // Shipped status
  if (order.timeline.shipped) {
    document.getElementById('shippedDate').textContent = new Date(order.timeline.shipped).toLocaleString();
    document.getElementById('shippedDot').classList.add('completed');
  } else {
    document.getElementById('shippedDate').textContent = 'Pending';
    document.getElementById('shippedDot').classList.remove('completed');
  }
  
  // Delivered status
  if (order.timeline.delivered) {
    document.getElementById('deliveredDate').textContent = new Date(order.timeline.delivered).toLocaleString();
    document.getElementById('deliveredDot').classList.add('completed');
  } else {
    document.getElementById('deliveredDate').textContent = 'Pending';
    document.getElementById('deliveredDot').classList.remove('completed');
  }
  
  // Populate order items
  const itemsList = document.getElementById('orderItemsList');
  itemsList.innerHTML = '';
  
  order.items.forEach(item => {
    const itemElement = document.createElement('div');
    itemElement.className = 'order-item';
    itemElement.innerHTML = `
      <img src="${item.image}" alt="${item.name}" class="order-item-image">
      <div class="order-item-details">
        <h4 class="order-item-name">${item.name}</h4>
        <div class="order-item-meta">Color: ${item.color} | Size: ${item.size}</div>
        <div class="order-item-meta">Quantity: ${item.quantity}</div>
      </div>
      <div class="order-item-price">$${(item.price * item.quantity).toFixed(2)}</div>
    `;
    itemsList.appendChild(itemElement);
  });
  
  // Populate order summary
  document.getElementById('detailSubtotal').textContent = `$${order.subtotal.toFixed(2)}`;
  document.getElementById('detailShipping').textContent = `$${order.shipping.toFixed(2)}`;
  document.getElementById('detailTax').textContent = `$${order.tax.toFixed(2)}`;
  document.getElementById('detailTotal').textContent = `$${order.total.toFixed(2)}`;
  
  // Populate addresses
  const shippingAddressElement = document.getElementById('shippingAddress');
  shippingAddressElement.innerHTML = formatAddress(order.shippingAddress);
  
  const billingAddressElement = document.getElementById('billingAddress');
  billingAddressElement.innerHTML = formatAddress(order.billingAddress);
  
  // Show/hide action buttons based on order status
  const cancelOrderBtn = document.getElementById('cancelOrderBtn');
  if (order.status === 'processing' || order.status === 'shipped') {
    cancelOrderBtn.style.display = 'inline-block';
  } else {
    cancelOrderBtn.style.display = 'none';
  }
  
  // Show order details section
  document.getElementById('ordersList').style.display = 'none';
  document.getElementById('orderDetails').style.display = 'block';
  
  // Populate return items list
  populateReturnItems(order);
}

// Format address for display
function formatAddress(address) {
  return `
    <div class="address-line">${address.name}</div>
    <div class="address-line">${address.street}</div>
    <div class="address-line">${address.city}, ${address.state} ${address.zip}</div>
    <div class="address-line">${address.country}</div>
    <div class="address-line">${address.phone}</div>
  `;
}

// Hide order details and show orders list
function hideOrderDetails() {
  document.getElementById('ordersList').style.display = 'block';
  document.getElementById('orderDetails').style.display = 'none';
  currentOrderId = null;
}

// Populate return items in the return modal
function populateReturnItems(order) {
  const returnItemsList = document.getElementById('returnItemsList');
  returnItemsList.innerHTML = '';
  
  order.items.forEach(item => {
    const itemElement = document.createElement('div');
    itemElement.className = 'return-item';
    itemElement.innerHTML = `
      <div class="form-check">
        <input type="checkbox" class="form-check-input" id="return-${item.id}" value="${item.id}">
        <label class="form-check-label" for="return-${item.id}">
          ${item.name} - ${item.color}, ${item.size} (${item.quantity} x $${item.price.toFixed(2)})
        </label>
      </div>
    `;
    returnItemsList.appendChild(itemElement);
  });
}

// Open cancel order modal
function openCancelModal() {
  document.getElementById('cancelOrderModal').style.display = 'flex';
}

// Open return order modal
function openReturnModal() {
  document.getElementById('returnOrderModal').style.display = 'flex';
}

// Close modal
function closeModal(modalId) {
  document.getElementById(modalId).style.display = 'none';
}

// Confirm cancel order
function confirmCancelOrder() {
  const reason = document.getElementById('cancelReason').value;
  if (!reason) {
    alert('Please select a reason for cancellation');
    return;
  }
  
  // In a real app, you would send this to your backend
  alert(`Order ${currentOrderId} cancellation request submitted with reason: ${reason}`);
  closeModal('cancelOrderModal');
  
  // Simulate order status update
  const orderIndex = orders.findIndex(order => order.id === currentOrderId);
  if (orderIndex !== -1) {
    orders[orderIndex].status = 'cancelled';
    // Update the orders list
    document.querySelector(`tr.order-row[data-status="${orders[orderIndex].status}"]`).dataset.status = 'cancelled';
    // Refresh the displayed order
    showOrderDetails(currentOrderId);
  }
}

// Confirm return
function confirmReturn() {
  const reason = document.getElementById('returnReason').value;
  const comments = document.getElementById('returnComments').value;
  
  if (!reason) {
    alert('Please select a reason for return');
    return;
  }
  
  const selectedItems = [];
  document.querySelectorAll('#returnItemsList input:checked').forEach(input => {
    selectedItems.push(input.value);
  });
  
  if (selectedItems.length === 0) {
    alert('Please select at least one item to return');
    return;
  }
  
  // In a real app, you would send this to your backend
  alert(`Return request submitted for ${selectedItems.length} item(s) with reason: ${reason}`);
  closeModal('returnOrderModal');
}

// Track order function
function trackOrder() {
  // In a real app, this would redirect to a tracking page or open a tracking modal
  alert('Tracking information would be displayed here');
}

// Logout function
function logout() {
  // In a real app, this would handle the logout process
  alert('Logging out...');
  // Redirect to login page
  // window.location.href = "/login";
}

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
  filterOrders(); // Apply initial filtering
});


currentOrderId = null;

// Filter orders based on status
function filterOrders() {
  const status = document.getElementById('status-filter').value;
  const orderRows = document.querySelectorAll('.order-row');
  
  orderRows.forEach(row => {
    if (status === 'all' || row.dataset.status === status) {
      row.style.display = 'table-row';
    } else {
      row.style.display = 'none';
    }
  });
}

// Show order details
function showOrderDetails(orderId) {
  currentOrderId = orderId;
  const order = orders.find(order => order.id === orderId);
  
  if (!order) return;
  
  // Populate order details
  document.getElementById('detailOrderNumber').textContent = `#${order.orderNumber}`;
  document.getElementById('detailOrderDate').textContent = new Date(order.date).toLocaleDateString();
  document.getElementById('detailPaymentMethod').textContent = order.paymentMethod;
  document.getElementById('detailDeliveryDate').textContent = order.expectedDelivery ? new Date(order.expectedDelivery).toLocaleDateString() : 'Pending';
  
  // Set order status
  const statusElement = document.getElementById('detailOrderStatus');
  statusElement.textContent = order.status.charAt(0).toUpperCase() + order.status.slice(1);
  statusElement.className = `order-status status-${order.status}`;
  
  // Update timeline
  document.getElementById('orderPlacedDate').textContent = new Date(order.timeline.ordered).toLocaleString();
  
  // Processing status
  if (order.timeline.processing) {
    document.getElementById('processingDate').textContent = new Date(order.timeline.processing).toLocaleString();
    document.getElementById('processingDot').classList.add('completed');
  } else {
    document.getElementById('processingDate').textContent = 'Pending';
    document.getElementById('processingDot').classList.remove('completed');
  }
  
  // Shipped status
  if (order.timeline.shipped) {
    document.getElementById('shippedDate').textContent = new Date(order.timeline.shipped).toLocaleString();
    document.getElementById('shippedDot').classList.add('completed');
  } else {
    document.getElementById('shippedDate').textContent = 'Pending';
    document.getElementById('shippedDot').classList.remove('completed');
  }
  
  // Delivered status
  if (order.timeline.delivered) {
    document.getElementById('deliveredDate').textContent = new Date(order.timeline.delivered).toLocaleString();
    document.getElementById('deliveredDot').classList.add('completed');
  } else {
    document.getElementById('deliveredDate').textContent = 'Pending';
    document.getElementById('deliveredDot').classList.remove('completed');
  }
  
  // Populate order items
  const itemsList = document.getElementById('orderItemsList');
  itemsList.innerHTML = '';
  
  order.items.forEach(item => {
    const itemElement = document.createElement('div');
    itemElement.className = 'order-item';
    itemElement.innerHTML = `
      <img src="${item.image}" alt="${item.name}" class="order-item-image">
      <div class="order-item-details">
        <h4 class="order-item-name">${item.name}</h4>
        <div class="order-item-meta">Color: ${item.color} | Size: ${item.size}</div>
        <div class="order-item-meta">Quantity: ${item.quantity}</div>
      </div>
      <div class="order-item-price">$${(item.price * item.quantity).toFixed(2)}</div>
    `;
    itemsList.appendChild(itemElement);
  });
  
  // Populate order summary
  document.getElementById('detailSubtotal').textContent = `$${order.subtotal.toFixed(2)}`;
  document.getElementById('detailShipping').textContent = `$${order.shipping.toFixed(2)}`;
  document.getElementById('detailTax').textContent = `$${order.tax.toFixed(2)}`;
  document.getElementById('detailTotal').textContent = `$${order.total.toFixed(2)}`;
  
  // Populate addresses
  const shippingAddressElement = document.getElementById('shippingAddress');
  shippingAddressElement.innerHTML = formatAddress(order.shippingAddress);
  
  const billingAddressElement = document.getElementById('billingAddress');
  billingAddressElement.innerHTML = formatAddress(order.billingAddress);
  
  // Show/hide action buttons based on order status
  const cancelOrderBtn = document.getElementById('cancelOrderBtn');
  if (order.status === 'processing' || order.status === 'shipped') {
    cancelOrderBtn.style.display = 'inline-block';
  } else {
    cancelOrderBtn.style.display = 'none';
  }
  
  // Show order details section
  document.getElementById('ordersList').style.display = 'none';
  document.getElementById('orderDetails').style.display = 'block';
  
  // Populate return items list
  populateReturnItems(order);
}

// Format address for display
function formatAddress(address) {
  return `
    <div class="address-line">${address.name}</div>
    <div class="address-line">${address.street}</div>
    <div class="address-line">${address.city}, ${address.state} ${address.zip}</div>
    <div class="address-line">${address.country}</div>
    <div class="address-line">${address.phone}</div>
  `;
}

// Hide order details and show orders list
function hideOrderDetails() {
  document.getElementById('ordersList').style.display = 'block';
  document.getElementById('orderDetails').style.display = 'none';
  currentOrderId = null;
}

// Populate return items in the return modal
function populateReturnItems(order) {
  const returnItemsList = document.getElementById('returnItemsList');
  returnItemsList.innerHTML = '';
  
  order.items.forEach(item => {
    const itemElement = document.createElement('div');
    itemElement.className = 'return-item';
    itemElement.innerHTML = `
      <div class="form-check">
        <input type="checkbox" class="form-check-input" id="return-${item.id}" value="${item.id}">
        <label class="form-check-label" for="return-${item.id}">
          ${item.name} - ${item.color}, ${item.size} (${item.quantity} x $${item.price.toFixed(2)})
        </label>
      </div>
    `;
    returnItemsList.appendChild(itemElement);
  });
}

// Open cancel order modal
function openCancelModal() {
  document.getElementById('cancelOrderModal').style.display = 'flex';
}

// Open return order modal
function openReturnModal() {
  document.getElementById('returnOrderModal').style.display = 'flex';
}

// Close modal
function closeModal(modalId) {
  document.getElementById(modalId).style.display = 'none';
}

// Confirm cancel order
function confirmCancelOrder() {
  const reason = document.getElementById('cancelReason').value;
  if (!reason) {
    alert('Please select a reason for cancellation');
    return;
  }
  
  // In a real app, you would send this to your backend
  alert(`Order ${currentOrderId} cancellation request submitted with reason: ${reason}`);
  closeModal('cancelOrderModal');
  
  // Simulate order status update
  const orderIndex = orders.findIndex(order => order.id === currentOrderId);
  if (orderIndex !== -1) {
    orders[orderIndex].status = 'cancelled';
    // Update the orders list
    const orderRow = document.querySelector(`tr.order-row[data-status]`);
    if (orderRow) {
      orderRow.dataset.status = 'cancelled';
      const statusCell = orderRow.querySelector('td:nth-child(5) .order-status');
      if (statusCell) {
        statusCell.textContent = 'Cancelled';
        statusCell.className = 'order-status status-cancelled';
      }
    }
    // Refresh the displayed order
    showOrderDetails(currentOrderId);
  }
}

// Confirm return
function confirmReturn() {
  const reason = document.getElementById('returnReason').value;
  const comments = document.getElementById('returnComments').value;
  
  if (!reason) {
    alert('Please select a reason for return');
    return;
  }
  
  const selectedItems = [];
  document.querySelectorAll('#returnItemsList input:checked').forEach(input => {
    selectedItems.push(input.value);
  });
  
  if (selectedItems.length === 0) {
    alert('Please select at least one item to return');
    return;
  }
  
  // In a real app, you would send this to your backend
  alert(`Return request submitted for ${selectedItems.length} item(s) with reason: ${reason}`);
  closeModal('returnOrderModal');
}

// Track order function
function trackOrder() {
  // In a real app, this would redirect to a tracking page or open a tracking modal
  alert('Tracking information would be displayed here');
}

// Logout function
function logout() {
  // In a real app, this would handle the logout process
  alert('Logging out...');
  // Redirect to login page
  // window.location.href = "/login";
}

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
  filterOrders(); // Apply initial filtering
});
</script>

<%- include('../partials/user/footer') %>
</body>